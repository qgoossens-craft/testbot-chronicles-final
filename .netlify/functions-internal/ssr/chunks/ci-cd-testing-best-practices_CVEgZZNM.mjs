import { a as createComponent, m as maybeRenderHead, u as unescapeHTML, r as renderTemplate } from './astro/server_pONdjIwT.mjs';
import 'kleur/colors';
import 'clsx';

const html = "<h1 id=\"cicd-testing-best-practices-building-quality-into-your-pipeline\">CI/CD Testing Best Practices: Building Quality into Your Pipeline</h1>\n<p>In modern software development, your CI/CD pipeline is more than just a deployment mechanism—it’s your quality gatekeeper. Here’s how to build comprehensive testing into every stage of your pipeline.</p>\n<h2 id=\"the-testing-pyramid-in-cicd\">The Testing Pyramid in CI/CD</h2>\n<p>Your pipeline should implement the testing pyramid strategy:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"yaml\"><code><span class=\"line\"><span style=\"color:#6A737D\"># Example GitHub Actions workflow</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">name</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">Quality Pipeline</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">on</span><span style=\"color:#E1E4E8\">: [</span><span style=\"color:#9ECBFF\">push</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">pull_request</span><span style=\"color:#E1E4E8\">]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#85E89D\">jobs</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  unit-tests</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    runs-on</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">ubuntu-latest</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    steps</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      - </span><span style=\"color:#85E89D\">uses</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">actions/checkout@v3</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      - </span><span style=\"color:#85E89D\">name</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">Run Unit Tests</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">        run</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">npm test</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        </span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  integration-tests</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    needs</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">unit-tests</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    runs-on</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">ubuntu-latest</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    steps</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      - </span><span style=\"color:#85E89D\">name</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">Run Integration Tests</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">        run</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">npm run test:integration</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        </span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  e2e-tests</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    needs</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">integration-tests</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    runs-on</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">ubuntu-latest</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    steps</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      - </span><span style=\"color:#85E89D\">name</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">Run E2E Tests</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">        run</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">npx playwright test</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"essential-quality-gates\">Essential Quality Gates</h2>\n<h3 id=\"1-code-quality-checks\">1. Code Quality Checks</h3>\n<ul>\n<li><strong>Linting</strong>: Enforce coding standards</li>\n<li><strong>Type checking</strong>: Catch type errors early</li>\n<li><strong>Security scanning</strong>: Identify vulnerabilities</li>\n</ul>\n<h3 id=\"2-test-coverage-requirements\">2. Test Coverage Requirements</h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#6A737D\">// jest.config.js</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">module</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#79B8FF\">exports</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  coverageThreshold: {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    global: {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      branches: </span><span style=\"color:#79B8FF\">80</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      functions: </span><span style=\"color:#79B8FF\">80</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      lines: </span><span style=\"color:#79B8FF\">80</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      statements: </span><span style=\"color:#79B8FF\">80</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"3-performance-budgets\">3. Performance Budgets</h3>\n<p>Fail builds that exceed performance thresholds:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"yaml\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">- </span><span style=\"color:#85E89D\">name</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">Lighthouse CI</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  run</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#F97583\">|</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    npm install -g @lhci/cli</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    lhci autorun</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"parallel-test-execution\">Parallel Test Execution</h2>\n<p>Speed up your pipeline with parallel execution:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"yaml\"><code><span class=\"line\"><span style=\"color:#85E89D\">strategy</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  matrix</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    browser</span><span style=\"color:#E1E4E8\">: [</span><span style=\"color:#9ECBFF\">chromium</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">firefox</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">webkit</span><span style=\"color:#E1E4E8\">]</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    </span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">steps</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  - </span><span style=\"color:#85E89D\">name</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">Run tests on ${{ matrix.browser }}</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    run</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">npx playwright test --project=${{ matrix.browser }}</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"test-environment-management\">Test Environment Management</h2>\n<h3 id=\"database-seeding\">Database Seeding</h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#6A737D\"># Setup script</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">docker-compose</span><span style=\"color:#9ECBFF\"> up</span><span style=\"color:#79B8FF\"> -d</span><span style=\"color:#9ECBFF\"> postgres</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">npm</span><span style=\"color:#9ECBFF\"> run</span><span style=\"color:#9ECBFF\"> db:migrate</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">npm</span><span style=\"color:#9ECBFF\"> run</span><span style=\"color:#9ECBFF\"> db:seed:test</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"feature-flags\">Feature Flags</h3>\n<p>Use feature flags to safely test new features:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Test with feature flag enabled</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">beforeEach</span><span style=\"color:#E1E4E8\">(() </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  process.env.</span><span style=\"color:#79B8FF\">FEATURE_NEW_CHECKOUT</span><span style=\"color:#F97583\"> =</span><span style=\"color:#9ECBFF\"> 'true'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">});</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"flaky-test-management\">Flaky Test Management</h2>\n<h3 id=\"retry-strategies\">Retry Strategies</h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Playwright retry configuration</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">module</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#79B8FF\">exports</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  retries: process.env.</span><span style=\"color:#79B8FF\">CI</span><span style=\"color:#F97583\"> ?</span><span style=\"color:#79B8FF\"> 2</span><span style=\"color:#F97583\"> :</span><span style=\"color:#79B8FF\"> 0</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  timeout: </span><span style=\"color:#79B8FF\">30000</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"test-quarantine\">Test Quarantine</h3>\n<p>Temporarily isolate flaky tests:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">test.</span><span style=\"color:#B392F0\">skip</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">'Flaky test - under investigation'</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#F97583\">async</span><span style=\"color:#E1E4E8\"> ({ </span><span style=\"color:#FFAB70\">page</span><span style=\"color:#E1E4E8\"> }) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Test code</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">});</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"deployment-testing\">Deployment Testing</h2>\n<h3 id=\"smoke-tests\">Smoke Tests</h3>\n<p>Run critical path tests after deployment:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"yaml\"><code><span class=\"line\"><span style=\"color:#85E89D\">post-deploy</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  runs-on</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">ubuntu-latest</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  steps</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    - </span><span style=\"color:#85E89D\">name</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">Smoke Tests</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      run</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#F97583\">|</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">        curl -f https://app.example.com/health</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">        npx playwright test --grep=\"@smoke\"</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"blue-green-testing\">Blue-Green Testing</h3>\n<p>Test the new environment before switching traffic:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"yaml\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">- </span><span style=\"color:#85E89D\">name</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">Test Blue Environment</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  run</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">npx playwright test --base-url=${{ env.BLUE_URL }}</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  </span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">- </span><span style=\"color:#85E89D\">name</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">Switch Traffic</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  if</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">success()</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  run</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">kubectl patch service app --patch '{\"spec\":{\"selector\":{\"version\":\"blue\"}}}'</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"monitoring-and-alerting\">Monitoring and Alerting</h2>\n<h3 id=\"test-result-notifications\">Test Result Notifications</h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"yaml\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">- </span><span style=\"color:#85E89D\">name</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">Notify on Failure</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  if</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">failure()</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  uses</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">slack-notify@v1</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  with</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    webhook</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">${{ secrets.SLACK_WEBHOOK }}</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    message</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"Tests failed on ${{ github.ref }}\"</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"metrics-collection\">Metrics Collection</h3>\n<p>Track test metrics over time:</p>\n<ul>\n<li>Test execution time</li>\n<li>Flaky test percentage</li>\n<li>Coverage trends</li>\n<li>Build success rate</li>\n</ul>\n<h2 id=\"common-pitfalls-to-avoid\">Common Pitfalls to Avoid</h2>\n<ol>\n<li><strong>Testing Everything in E2E</strong>: Keep E2E tests focused on critical user journeys</li>\n<li><strong>Ignoring Flaky Tests</strong>: Address root causes, don’t just retry</li>\n<li><strong>No Test Data Strategy</strong>: Plan how to manage test data across environments</li>\n<li><strong>Blocking Pipeline</strong>: Make non-critical tests informational only</li>\n</ol>\n<h2 id=\"advanced-strategies\">Advanced Strategies</h2>\n<h3 id=\"contract-testing\">Contract Testing</h3>\n<p>Use Pact or similar tools for API contract testing:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Consumer test</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">await</span><span style=\"color:#E1E4E8\"> provider</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  .</span><span style=\"color:#B392F0\">given</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">'user exists'</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  .</span><span style=\"color:#B392F0\">uponReceiving</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">'get user request'</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  .</span><span style=\"color:#B392F0\">withRequest</span><span style=\"color:#E1E4E8\">({</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    method: </span><span style=\"color:#9ECBFF\">'GET'</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    path: </span><span style=\"color:#9ECBFF\">'/users/123'</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  })</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  .</span><span style=\"color:#B392F0\">willRespondWith</span><span style=\"color:#E1E4E8\">({</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    status: </span><span style=\"color:#79B8FF\">200</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    body: { id: </span><span style=\"color:#79B8FF\">123</span><span style=\"color:#E1E4E8\">, name: </span><span style=\"color:#9ECBFF\">'John'</span><span style=\"color:#E1E4E8\"> }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  });</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"progressive-testing\">Progressive Testing</h3>\n<p>Gradually roll out tests to subsets of traffic:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"yaml\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">- </span><span style=\"color:#85E89D\">name</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">Canary Tests</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  if</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">contains(github.ref, 'main')</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  run</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#F97583\">|</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    # Deploy to 5% of traffic</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    # Run subset of tests</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    # Gradually increase if passing</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>A well-designed CI/CD testing strategy should:</p>\n<ul>\n<li><strong>Fail fast</strong>: Catch issues as early as possible</li>\n<li><strong>Provide clear feedback</strong>: Help developers understand what broke</li>\n<li><strong>Scale with your team</strong>: Support multiple developers and features</li>\n<li><strong>Maintain quality</strong>: Never compromise on quality for speed</li>\n</ul>\n<p>Remember: the best CI/CD pipeline is one that your team trusts to catch issues while staying out of their way.</p>\n<hr>\n<p><em>What CI/CD testing challenges have you faced? Share your experiences and solutions!</em></p>";

				const frontmatter = {"title":"CI/CD Testing Best Practices: Building Quality into Your Pipeline","description":"Essential strategies for integrating comprehensive testing into your CI/CD pipeline, ensuring quality at every deployment.","pubDate":"2024-01-25T00:00:00.000Z","tags":["ci-cd","automation","devops","testing-strategy","quality-gates"]};
				const file = "C:/Users/qgoos/Desktop/TestBot-Chronicles/testbot-chronicles/src/content/blog/ci-cd-testing-best-practices.md";
				const url = undefined;
				function rawContent() {
					return "\n# CI/CD Testing Best Practices: Building Quality into Your Pipeline\n\nIn modern software development, your CI/CD pipeline is more than just a deployment mechanism—it's your quality gatekeeper. Here's how to build comprehensive testing into every stage of your pipeline.\n\n## The Testing Pyramid in CI/CD\n\nYour pipeline should implement the testing pyramid strategy:\n\n```yaml\n# Example GitHub Actions workflow\nname: Quality Pipeline\non: [push, pull_request]\n\njobs:\n  unit-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Run Unit Tests\n        run: npm test\n        \n  integration-tests:\n    needs: unit-tests\n    runs-on: ubuntu-latest\n    steps:\n      - name: Run Integration Tests\n        run: npm run test:integration\n        \n  e2e-tests:\n    needs: integration-tests\n    runs-on: ubuntu-latest\n    steps:\n      - name: Run E2E Tests\n        run: npx playwright test\n```\n\n## Essential Quality Gates\n\n### 1. Code Quality Checks\n- **Linting**: Enforce coding standards\n- **Type checking**: Catch type errors early\n- **Security scanning**: Identify vulnerabilities\n\n### 2. Test Coverage Requirements\n```javascript\n// jest.config.js\nmodule.exports = {\n  coverageThreshold: {\n    global: {\n      branches: 80,\n      functions: 80,\n      lines: 80,\n      statements: 80\n    }\n  }\n};\n```\n\n### 3. Performance Budgets\nFail builds that exceed performance thresholds:\n\n```yaml\n- name: Lighthouse CI\n  run: |\n    npm install -g @lhci/cli\n    lhci autorun\n```\n\n## Parallel Test Execution\n\nSpeed up your pipeline with parallel execution:\n\n```yaml\nstrategy:\n  matrix:\n    browser: [chromium, firefox, webkit]\n    \nsteps:\n  - name: Run tests on ${{ matrix.browser }}\n    run: npx playwright test --project=${{ matrix.browser }}\n```\n\n## Test Environment Management\n\n### Database Seeding\n```bash\n# Setup script\ndocker-compose up -d postgres\nnpm run db:migrate\nnpm run db:seed:test\n```\n\n### Feature Flags\nUse feature flags to safely test new features:\n\n```javascript\n// Test with feature flag enabled\nbeforeEach(() => {\n  process.env.FEATURE_NEW_CHECKOUT = 'true';\n});\n```\n\n## Flaky Test Management\n\n### Retry Strategies\n```javascript\n// Playwright retry configuration\nmodule.exports = {\n  retries: process.env.CI ? 2 : 0,\n  timeout: 30000,\n};\n```\n\n### Test Quarantine\nTemporarily isolate flaky tests:\n\n```javascript\ntest.skip('Flaky test - under investigation', async ({ page }) => {\n  // Test code\n});\n```\n\n## Deployment Testing\n\n### Smoke Tests\nRun critical path tests after deployment:\n\n```yaml\npost-deploy:\n  runs-on: ubuntu-latest\n  steps:\n    - name: Smoke Tests\n      run: |\n        curl -f https://app.example.com/health\n        npx playwright test --grep=\"@smoke\"\n```\n\n### Blue-Green Testing\nTest the new environment before switching traffic:\n\n```yaml\n- name: Test Blue Environment\n  run: npx playwright test --base-url=${{ env.BLUE_URL }}\n  \n- name: Switch Traffic\n  if: success()\n  run: kubectl patch service app --patch '{\"spec\":{\"selector\":{\"version\":\"blue\"}}}'\n```\n\n## Monitoring and Alerting\n\n### Test Result Notifications\n```yaml\n- name: Notify on Failure\n  if: failure()\n  uses: slack-notify@v1\n  with:\n    webhook: ${{ secrets.SLACK_WEBHOOK }}\n    message: \"Tests failed on ${{ github.ref }}\"\n```\n\n### Metrics Collection\nTrack test metrics over time:\n- Test execution time\n- Flaky test percentage\n- Coverage trends\n- Build success rate\n\n## Common Pitfalls to Avoid\n\n1. **Testing Everything in E2E**: Keep E2E tests focused on critical user journeys\n2. **Ignoring Flaky Tests**: Address root causes, don't just retry\n3. **No Test Data Strategy**: Plan how to manage test data across environments\n4. **Blocking Pipeline**: Make non-critical tests informational only\n\n## Advanced Strategies\n\n### Contract Testing\nUse Pact or similar tools for API contract testing:\n\n```javascript\n// Consumer test\nawait provider\n  .given('user exists')\n  .uponReceiving('get user request')\n  .withRequest({\n    method: 'GET',\n    path: '/users/123'\n  })\n  .willRespondWith({\n    status: 200,\n    body: { id: 123, name: 'John' }\n  });\n```\n\n### Progressive Testing\nGradually roll out tests to subsets of traffic:\n\n```yaml\n- name: Canary Tests\n  if: contains(github.ref, 'main')\n  run: |\n    # Deploy to 5% of traffic\n    # Run subset of tests\n    # Gradually increase if passing\n```\n\n## Conclusion\n\nA well-designed CI/CD testing strategy should:\n- **Fail fast**: Catch issues as early as possible\n- **Provide clear feedback**: Help developers understand what broke\n- **Scale with your team**: Support multiple developers and features\n- **Maintain quality**: Never compromise on quality for speed\n\nRemember: the best CI/CD pipeline is one that your team trusts to catch issues while staying out of their way.\n\n---\n\n*What CI/CD testing challenges have you faced? Share your experiences and solutions!*";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":1,"slug":"cicd-testing-best-practices-building-quality-into-your-pipeline","text":"CI/CD Testing Best Practices: Building Quality into Your Pipeline"},{"depth":2,"slug":"the-testing-pyramid-in-cicd","text":"The Testing Pyramid in CI/CD"},{"depth":2,"slug":"essential-quality-gates","text":"Essential Quality Gates"},{"depth":3,"slug":"1-code-quality-checks","text":"1. Code Quality Checks"},{"depth":3,"slug":"2-test-coverage-requirements","text":"2. Test Coverage Requirements"},{"depth":3,"slug":"3-performance-budgets","text":"3. Performance Budgets"},{"depth":2,"slug":"parallel-test-execution","text":"Parallel Test Execution"},{"depth":2,"slug":"test-environment-management","text":"Test Environment Management"},{"depth":3,"slug":"database-seeding","text":"Database Seeding"},{"depth":3,"slug":"feature-flags","text":"Feature Flags"},{"depth":2,"slug":"flaky-test-management","text":"Flaky Test Management"},{"depth":3,"slug":"retry-strategies","text":"Retry Strategies"},{"depth":3,"slug":"test-quarantine","text":"Test Quarantine"},{"depth":2,"slug":"deployment-testing","text":"Deployment Testing"},{"depth":3,"slug":"smoke-tests","text":"Smoke Tests"},{"depth":3,"slug":"blue-green-testing","text":"Blue-Green Testing"},{"depth":2,"slug":"monitoring-and-alerting","text":"Monitoring and Alerting"},{"depth":3,"slug":"test-result-notifications","text":"Test Result Notifications"},{"depth":3,"slug":"metrics-collection","text":"Metrics Collection"},{"depth":2,"slug":"common-pitfalls-to-avoid","text":"Common Pitfalls to Avoid"},{"depth":2,"slug":"advanced-strategies","text":"Advanced Strategies"},{"depth":3,"slug":"contract-testing","text":"Contract Testing"},{"depth":3,"slug":"progressive-testing","text":"Progressive Testing"},{"depth":2,"slug":"conclusion","text":"Conclusion"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
