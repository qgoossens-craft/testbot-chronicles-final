---
export interface Props {
  headings: Array<{
    depth: number;
    slug: string;
    text: string;
  }>;
  minHeadingLevel?: number;
  maxHeadingLevel?: number;
}

const { headings, minHeadingLevel = 2, maxHeadingLevel = 3 } = Astro.props;

// Filter headings based on depth
const filteredHeadings = headings.filter(
  heading => heading.depth >= minHeadingLevel && heading.depth <= maxHeadingLevel
);

// Only show TOC if there are enough headings
const showToc = filteredHeadings.length >= 3;
---

{showToc && (
  <nav class="toc-container group mb-8 lg:mb-0">
    <div class="toc-wrapper bg-white/80 backdrop-blur-md rounded-2xl border border-gray-200/50 shadow-lg hover:shadow-xl transition-all duration-300 overflow-hidden">
      <!-- Compact Header -->
      <div class="toc-header flex items-center justify-between p-4 cursor-pointer">
        <div class="flex items-center">
          <div class="toc-icon-container w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center mr-3">
            <svg class="w-4 h-4 text-white transition-transform duration-300 group-hover:rotate-90" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h8M4 18h12"></path>
            </svg>
          </div>
          <span class="font-semibold text-gray-900 text-sm">Contents</span>
        </div>
        <div class="toc-progress-ring">
          <svg class="w-6 h-6 -rotate-90" viewBox="0 0 24 24">
            <circle cx="12" cy="12" r="10" fill="none" stroke="#e5e7eb" stroke-width="2"/>
            <circle 
              cx="12" 
              cy="12" 
              r="10" 
              fill="none" 
              stroke="#3b82f6" 
              stroke-width="2"
              stroke-linecap="round"
              stroke-dasharray="62.83"
              stroke-dashoffset="62.83"
              class="toc-progress-circle transition-all duration-300"
            />
          </svg>
        </div>
      </div>

      <!-- Expandable Content -->
      <div class="toc-content max-h-0 group-hover:max-h-96 transition-all duration-500 ease-out overflow-hidden">
        <div class="px-4 pb-4">
          <div class="h-px bg-gradient-to-r from-transparent via-gray-200 to-transparent mb-4"></div>
          <ul class="space-y-1" id="toc-list">
            {filteredHeadings.map((heading, index) => (
              <li 
                class={`toc-item opacity-0 group-hover:opacity-100 transition-all duration-300 ${heading.depth === 2 ? 'ml-0' : 'ml-4'}`}
                data-slug={heading.slug}
                style={`transition-delay: ${index * 50}ms`}
              >
                <a 
                  href={`#${heading.slug}`}
                  class="toc-link flex items-center group/link py-2 px-3 text-sm text-gray-600 hover:text-blue-600 hover:bg-blue-50 rounded-lg transition-all duration-200"
                >
                  <div class={`w-1.5 h-1.5 rounded-full mr-3 transition-all duration-200 ${heading.depth === 2 ? 'bg-blue-600' : 'bg-gray-400'}`}></div>
                  <span class={`truncate ${heading.depth === 2 ? 'font-medium' : ''}`}>
                    {heading.text}
                  </span>
                  <svg class="w-3 h-3 ml-auto opacity-0 group-hover/link:opacity-100 transition-opacity duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                  </svg>
                </a>
              </li>
            ))}
          </ul>
        </div>
      </div>
    </div>
  </nav>
)}

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const tocLinks = document.querySelectorAll('.toc-link');
    const progressCircle = document.querySelector('.toc-progress-circle');
    
    // Smooth scroll behavior for TOC links
    tocLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('href')?.slice(1);
        if (targetId) {
          const targetElement = document.getElementById(targetId);
          if (targetElement) {
            const headerOffset = 80;
            const elementPosition = targetElement.getBoundingClientRect().top;
            const offsetPosition = elementPosition + window.pageYOffset - headerOffset;
            
            window.scrollTo({
              top: offsetPosition,
              behavior: 'smooth'
            });
          }
        }
      });
    });
    
    // Calculate reading progress
    function updateProgress() {
      const scrollTop = window.pageYOffset;
      const docHeight = document.body.scrollHeight - window.innerHeight;
      const progress = (scrollTop / docHeight) * 100;
      
      if (progressCircle) {
        const circumference = 2 * Math.PI * 10; // radius = 10
        const offset = circumference - (progress / 100) * circumference;
        progressCircle.style.strokeDashoffset = offset.toString();
      }
    }
    
    // Highlight current section in TOC
    const observerOptions = {
      rootMargin: '-20% 0px -70% 0px',
      threshold: 0
    };
    
    const observerCallback = (entries: IntersectionObserverEntry[]) => {
      entries.forEach(entry => {
        const slug = entry.target.id;
        const tocItem = document.querySelector(`[data-slug="${slug}"]`);
        const tocLink = tocItem?.querySelector('.toc-link');
        const dot = tocLink?.querySelector('div');
        
        if (entry.isIntersecting) {
          // Remove all active classes
          document.querySelectorAll('.toc-link').forEach(link => {
            link.classList.remove('text-blue-600', 'bg-blue-50');
            link.classList.add('text-gray-600');
            const linkDot = link.querySelector('div');
            if (linkDot) {
              linkDot.classList.remove('bg-blue-600', 'shadow-lg');
              linkDot.classList.add('bg-gray-400');
            }
          });
          
          // Add active class to current item
          if (tocLink && dot) {
            tocLink.classList.remove('text-gray-600');
            tocLink.classList.add('text-blue-600', 'bg-blue-50');
            dot.classList.remove('bg-gray-400');
            dot.classList.add('bg-blue-600', 'shadow-lg');
          }
        }
      });
    };
    
    const observer = new IntersectionObserver(observerCallback, observerOptions);
    
    // Observe all headings that are in the TOC
    const tocItems = document.querySelectorAll('.toc-item');
    tocItems.forEach(item => {
      const slug = item.getAttribute('data-slug');
      if (slug) {
        const heading = document.getElementById(slug);
        if (heading) {
          observer.observe(heading);
        }
      }
    });
    
    // Update progress on scroll
    window.addEventListener('scroll', updateProgress);
    updateProgress(); // Initial call
  });
</script>

<style>
  .toc-container {
    max-height: calc(100vh - 6rem);
    width: 280px;
    transition: all 0.3s ease;
    z-index: 40;
  }
  
  @media (min-width: 1024px) {
    .toc-container {
      position: fixed;
      top: 20rem;
      left: 2rem;
      max-height: calc(100vh - 22rem);
      z-index: 50;
      transition: all 0.3s ease;
    }
  }
  
  .toc-wrapper {
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    position: relative;
    z-index: 50;
  }
  
  .toc-wrapper:hover {
    transform: translateY(-2px);
    box-shadow: 0 16px 40px rgba(0, 0, 0, 0.15);
  }
  
  .toc-content {
    transition: max-height 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    overflow: hidden;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
  }
  
  .toc-container:hover .toc-content {
    max-height: calc(100vh - 8rem) !important;
    overflow-y: auto;
  }
  
  .toc-item {
    transform: translateX(-10px);
    transition: all 0.3s ease;
  }
  
  .toc-container:hover .toc-item {
    transform: translateX(0);
  }
  
  .toc-link {
    position: relative;
    overflow: hidden;
  }
  
  .toc-link::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.1), transparent);
    transition: left 0.6s ease;
  }
  
  .toc-link:hover::before {
    left: 100%;
  }
  
  .toc-progress-circle {
    transition: stroke-dashoffset 0.3s ease;
  }
  
  .toc-icon-container {
    background: linear-gradient(135deg, #3b82f6, #1d4ed8);
    box-shadow: 0 2px 8px rgba(59, 130, 246, 0.3);
  }
  
  /* Mobile responsive */
  @media (max-width: 1024px) {
    .toc-container {
      width: 100%;
      position: sticky;
      top: 1rem;
      max-height: none;
      z-index: 50;
      left: auto;
    }
    
    .toc-content {
      max-height: 0;
    }
    
    .toc-container:hover .toc-content,
    .toc-wrapper:hover .toc-content {
      max-height: 60vh !important;
      overflow-y: auto;
    }
  }
  
  /* Smooth scroll behavior */
  html {
    scroll-behavior: smooth;
  }
  
  /* Hide scrollbar but keep functionality */
  .toc-content {
    scrollbar-width: thin;
    scrollbar-color: #e5e7eb transparent;
  }
  
  .toc-content::-webkit-scrollbar {
    width: 3px;
  }
  
  .toc-content::-webkit-scrollbar-track {
    background: transparent;
  }
  
  .toc-content::-webkit-scrollbar-thumb {
    background: #e5e7eb;
    border-radius: 2px;
  }
  
  .toc-content::-webkit-scrollbar-thumb:hover {
    background: #d1d5db;
  }
</style>