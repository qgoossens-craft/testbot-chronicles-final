---
import { calculateReadingTime, formatReadingTime } from '../utils/readingTime';

export interface Props {
  post: any;
  readingTime: number;
}

const { post, readingTime } = Astro.props;

function formatDate(date: Date) {
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}
---

<a href={`/blog/${post.slug}/`} class="block h-full">
  <article class="blog-post-card group bg-white rounded-xl border-2 border-gray-300 hover:border-blue-400 hover:shadow-xl transition-all duration-300 overflow-hidden cursor-pointer h-full flex flex-col">
    {post.data.heroImage && (
      <div class="image-container relative h-48 overflow-hidden bg-gray-100 transition-all duration-300">
        <img 
          src={post.data.heroImage.startsWith('/') ? post.data.heroImage : `/${post.data.heroImage}`} 
          alt={post.data.title}
          class="hero-image w-full h-full object-contain group-hover:scale-105 transition-transform duration-300"
          loading="lazy"
          crossorigin="anonymous"
        />
      </div>
    )}
    <div class="p-6 flex flex-col flex-1">
      <div class="flex items-center justify-between text-sm text-gray-500 mb-3">
        <div class="flex items-center">
          <time datetime={post.data.pubDate.toISOString()}>
            {formatDate(post.data.pubDate)}
          </time>
          {post.data.updatedDate && (
            <span class="ml-2 text-xs">
              (Updated: {formatDate(post.data.updatedDate)})
            </span>
          )}
        </div>
        <span class="text-xs font-medium text-blue-600">
          {formatReadingTime(readingTime)}
        </span>
      </div>
      
      {post.data.category && (
        <div class="mb-3">
          <span class="post-category inline-block bg-blue-50 text-blue-700 text-xs font-semibold px-2 py-1 rounded-md border border-blue-300 transition-all duration-300">
            {post.data.category}
          </span>
        </div>
      )}
      
      <h2 class="text-xl font-bold text-gray-900 mb-3 group-hover:text-blue-600 transition-colors">
        {post.data.title}
      </h2>
      
      <p class="post-description text-gray-600 mb-4 line-clamp-3 flex-1">
        {post.data.description}
      </p>
      
      {post.data.tags && post.data.tags.length > 0 && (
        <div class="flex flex-wrap gap-2 mb-4">
          {post.data.tags.slice(0, 3).map((tag) => (
            <span class="post-tag inline-block bg-blue-50 text-blue-700 text-xs font-medium px-2 py-1 rounded transition-all duration-300">
              {tag}
            </span>
          ))}
          {post.data.tags.length > 3 && (
            <span class="text-xs text-gray-500">
              +{post.data.tags.length - 3} more
            </span>
          )}
        </div>
      )}
      
      <div class="mt-auto">
        <div class="inline-flex items-center text-blue-600 hover:text-blue-700 font-medium text-sm group-hover:translate-x-1 transition-transform">
          Read article
          <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
          </svg>
        </div>
      </div>
    </div>
  </article>
</a>

<script>
  import { extractColorsFromImage, getContrastColor } from '../utils/colorExtractor';
  
  function initializeAdaptiveCards() {
    const cards = document.querySelectorAll('.blog-post-card');
    
    cards.forEach(async (card) => {
      const heroImage = card.querySelector('.hero-image') as HTMLImageElement;
      const imageContainer = card.querySelector('.image-container') as HTMLElement;
      
      if (!heroImage || !imageContainer) return;
      
      try {
        // Wait for image to load
        if (!heroImage.complete) {
          await new Promise((resolve) => {
            heroImage.onload = resolve;
            heroImage.onerror = resolve;
          });
        }
        
        // Extract colors from the image
        const colors = await extractColorsFromImage(heroImage.src);
        
        // Create gradient background for the image container
        const gradient = `linear-gradient(135deg, ${colors.primary} 0%, ${colors.secondary} 100%)`;
        
        // Apply the gradient to the image background area
        imageContainer.style.background = gradient;
        
        // Add a subtle pattern overlay for texture
        const patternOverlay = `
          ${gradient},
          radial-gradient(circle at 20% 50%, rgba(255,255,255,0.1) 0%, transparent 50%),
          radial-gradient(circle at 80% 20%, rgba(255,255,255,0.05) 0%, transparent 50%),
          radial-gradient(circle at 40% 80%, rgba(255,255,255,0.03) 0%, transparent 50%)
        `;
        
        imageContainer.style.background = patternOverlay;
        
        // Optional: Add a subtle inner shadow for depth
        imageContainer.style.boxShadow = `inset 0 2px 4px rgba(0,0,0,0.1)`;
        
        // Keep categories and tags with their original blue styling
        // Remove any adaptive color styling for tags and categories
        
      } catch (error) {
        console.log('Could not extract colors from image:', error);
        // Fallback to default styling - keep the gray background
      }
    });
  }
  
  // Handle both initial load and View Transitions
  document.addEventListener('DOMContentLoaded', initializeAdaptiveCards);
  document.addEventListener('astro:page-load', initializeAdaptiveCards);
</script>

<style>
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .image-container {
    position: relative;
    transition: all 0.3s ease;
  }
  
  .hero-image {
    position: relative;
    z-index: 10;
  }
  
  .blog-post-card:hover .image-container {
    transform: scale(1.02);
  }
</style>