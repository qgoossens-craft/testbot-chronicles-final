---
// This component will handle client-side search and filtering
---

<div id="blog-search-container" class="mb-8">
  <!-- Search Input -->
  <div class="mb-6">
    <div class="relative">
      <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
        <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
      </div>
      <input
        type="text"
        id="search-input"
        class="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white"
        placeholder="Search articles..."
      />
    </div>
  </div>

  <!-- Category Filter -->
  <div class="mb-6">
    <h3 class="text-sm font-semibold text-gray-700 mb-3">Categories</h3>
    <div class="flex flex-wrap gap-2" id="category-filters">
      <!-- Categories will be populated by JavaScript -->
    </div>
  </div>

  <!-- Tag Filter -->
  <div class="mb-6">
    <h3 class="text-sm font-semibold text-gray-700 mb-3">Tags</h3>
    <div class="flex flex-wrap gap-2" id="tag-filters">
      <!-- Tags will be populated by JavaScript -->
    </div>
  </div>

  <!-- Results Count -->
  <div class="text-sm text-gray-600 mb-4">
    <span id="results-count">Showing all articles</span>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Add a small delay to ensure all card elements are properly rendered
    setTimeout(() => {
      initializeBlogSearch();
    }, 100);
  });
  
  function initializeBlogSearch() {
    const searchInput = document.getElementById('search-input') as HTMLInputElement;
    const categoryFilters = document.getElementById('category-filters') as HTMLDivElement;
    const tagFilters = document.getElementById('tag-filters') as HTMLDivElement;
    const resultsCount = document.getElementById('results-count') as HTMLSpanElement;
    const blogPosts = document.querySelectorAll('.blog-post-card');
    
    interface PostData {
      element: HTMLElement;
      title: string;
      description: string;
      tags: string[];
      category: string | null;
      searchText: string;
    }
    
    let allPosts: PostData[] = [];
    let allCategories = new Set<string>();
    let allTags = new Set<string>();
    let activeCategoryFilters = new Set<string>();
    let activeTagFilters = new Set<string>();
    
    // Initialize posts data
    blogPosts.forEach((post: Element, index: number) => {
      const titleElement = post.querySelector('h2');
      const descriptionElement = post.querySelector('.post-description');
      
      if (!titleElement || !descriptionElement) return;
      
      const title = titleElement.textContent?.toLowerCase() || '';
      const description = descriptionElement.textContent?.toLowerCase() || '';
      const tags = Array.from(post.querySelectorAll('.post-tag')).map((tag: Element) => tag.textContent?.replace('#', '').toLowerCase() || '').filter((tag: string) => tag);
      const categoryElement = post.querySelector('.post-category');
      const category = categoryElement?.textContent?.toLowerCase() || null;
      
      allPosts.push({
        element: post as HTMLElement,
        title,
        description,
        tags,
        category,
        searchText: title + ' ' + description + ' ' + tags.join(' ') + (category ? ' ' + category : '')
      });
      
      tags.forEach((tag: string) => allTags.add(tag));
      if (category) allCategories.add(category);
    });
    
    // Create category filter buttons
    function createCategoryFilters() {
      categoryFilters.innerHTML = '';
      
      // All button
      const allButton = document.createElement('button');
      allButton.textContent = 'All Categories';
      allButton.className = 'px-4 py-2 rounded-lg text-sm font-medium transition-colors bg-blue-600 text-white border border-blue-600';
      allButton.onclick = () => clearFilters();
      categoryFilters.appendChild(allButton);
      
      // Category buttons
      Array.from(allCategories).sort().forEach((category: string) => {
        const button = document.createElement('button');
        button.textContent = category.charAt(0).toUpperCase() + category.slice(1);
        button.className = 'px-4 py-2 rounded-lg text-sm font-medium transition-colors bg-white text-gray-700 border border-gray-300 hover:bg-gray-50';
        button.onclick = () => toggleCategoryFilter(category, button);
        categoryFilters.appendChild(button);
      });
    }
    
    // Create tag filter buttons
    function createTagFilters() {
      tagFilters.innerHTML = '';
      
      // Tag buttons
      Array.from(allTags).sort().forEach((tag: string) => {
        const button = document.createElement('button');
        button.textContent = '#' + tag;
        button.className = 'px-3 py-1 rounded-full text-sm font-medium transition-colors bg-gray-100 text-gray-700 border border-gray-200 hover:bg-gray-200';
        button.onclick = () => toggleTagFilter(tag, button);
        tagFilters.appendChild(button);
      });
    }
    
    // Toggle category filter
    function toggleCategoryFilter(category: string, button: HTMLButtonElement) {
      // Clear all category filters first (single selection)
      activeCategoryFilters.clear();
      
      // Add the new category
      activeCategoryFilters.add(category);
      
      updateAllButtons();
      updateCategoryButtons();
      filterPosts();
    }
    
    // Toggle tag filter
    function toggleTagFilter(tag: string, button: HTMLButtonElement) {
      if (activeTagFilters.has(tag)) {
        activeTagFilters.delete(tag);
        button.className = 'px-3 py-1 rounded-full text-sm font-medium transition-colors bg-gray-100 text-gray-700 border border-gray-200 hover:bg-gray-200';
      } else {
        activeTagFilters.add(tag);
        button.className = 'px-3 py-1 rounded-full text-sm font-medium transition-colors bg-blue-100 text-blue-800 border border-blue-200';
      }
      
      updateAllButtons();
      filterPosts();
    }
    
    // Clear all filters
    function clearFilters() {
      activeCategoryFilters.clear();
      activeTagFilters.clear();
      searchInput.value = '';
      updateAllButtons();
      updateCategoryButtons();
      updateTagButtons();
      filterPosts();
    }
    
    // Update All button states
    function updateAllButtons() {
      const categoryAllButton = categoryFilters.querySelector('button');
      if (!categoryAllButton) return;
      
      if (activeCategoryFilters.size === 0 && activeTagFilters.size === 0 && !searchInput.value.trim()) {
        categoryAllButton.className = 'px-4 py-2 rounded-lg text-sm font-medium transition-colors bg-blue-600 text-white border border-blue-600';
      } else {
        categoryAllButton.className = 'px-4 py-2 rounded-lg text-sm font-medium transition-colors bg-white text-gray-700 border border-gray-300 hover:bg-gray-50';
      }
    }
    
    // Update category button states
    function updateCategoryButtons() {
      const buttons = categoryFilters.querySelectorAll<HTMLButtonElement>('button:not(:first-child)');
      buttons.forEach((button) => {
        const category = button.textContent?.toLowerCase() || '';
        if (activeCategoryFilters.has(category)) {
          button.className = 'px-4 py-2 rounded-lg text-sm font-medium transition-colors bg-blue-600 text-white border border-blue-600';
        } else {
          button.className = 'px-4 py-2 rounded-lg text-sm font-medium transition-colors bg-white text-gray-700 border border-gray-300 hover:bg-gray-50';
        }
      });
    }
    
    // Update tag button states
    function updateTagButtons() {
      const buttons = tagFilters.querySelectorAll<HTMLButtonElement>('button');
      buttons.forEach((button) => {
        const tag = button.textContent?.replace('#', '').toLowerCase() || '';
        if (activeTagFilters.has(tag)) {
          button.className = 'px-3 py-1 rounded-full text-sm font-medium transition-colors bg-blue-100 text-blue-800 border border-blue-200';
        } else {
          button.className = 'px-3 py-1 rounded-full text-sm font-medium transition-colors bg-gray-100 text-gray-700 border border-gray-200 hover:bg-gray-200';
        }
      });
    }
    
    // Filter posts based on search, category, and tag filters
    function filterPosts() {
      const searchTerm = searchInput.value.toLowerCase().trim();
      let visibleCount = 0;
      
      allPosts.forEach((post: PostData) => {
        let matches = true;
        
        // Check search term
        if (searchTerm && !post.searchText.includes(searchTerm)) {
          matches = false;
        }
        
        // Check category filters
        if (activeCategoryFilters.size > 0) {
          const hasActiveCategory = Array.from(activeCategoryFilters).some((filter: string) => 
            post.category === filter
          );
          if (!hasActiveCategory) {
            matches = false;
          }
        }
        
        // Check tag filters
        if (activeTagFilters.size > 0) {
          const hasActiveTag = Array.from(activeTagFilters).some((filter: string) => 
            post.tags.includes(filter)
          );
          if (!hasActiveTag) {
            matches = false;
          }
        }
        
        if (matches) {
          post.element.style.display = '';
          visibleCount++;
        } else {
          post.element.style.display = 'none';
        }
      });
      
      // Update results count
      if (visibleCount === allPosts.length) {
        resultsCount.textContent = `Showing all ${allPosts.length} articles`;
      } else {
        resultsCount.textContent = `Showing ${visibleCount} of ${allPosts.length} articles`;
      }
    }
    
    // Search input event listener
    searchInput.addEventListener('input', function() {
      updateAllButtons();
      filterPosts();
    });
    
    // Initialize
    createCategoryFilters();
    createTagFilters();
    filterPosts();
  }
</script>