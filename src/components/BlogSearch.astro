---
// This component will handle client-side search and filtering
---

<div id="blog-search-container" class="mb-8">
  <!-- Search Input -->
  <div class="mb-6">
    <div class="relative">
      <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
        <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
      </div>
      <input
        type="text"
        id="search-input"
        class="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white"
        placeholder="Search articles..."
      />
    </div>
  </div>

  <!-- Tag Filter -->
  <div class="mb-6">
    <div class="flex flex-wrap gap-2" id="tag-filters">
      <!-- Tags will be populated by JavaScript -->
    </div>
  </div>

  <!-- Results Count -->
  <div class="text-sm text-gray-600 mb-4">
    <span id="results-count">Showing all articles</span>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('search-input');
    const tagFilters = document.getElementById('tag-filters');
    const resultsCount = document.getElementById('results-count');
    const blogPosts = document.querySelectorAll('.blog-post-card');
    
    let allPosts = [];
    let allTags = new Set();
    let activeFilters = new Set();
    
    // Initialize posts data
    blogPosts.forEach((post, index) => {
      const title = post.querySelector('h2').textContent.toLowerCase();
      const description = post.querySelector('.post-description').textContent.toLowerCase();
      const tags = Array.from(post.querySelectorAll('.post-tag')).map(tag => tag.textContent.replace('#', '').toLowerCase());
      
      allPosts.push({
        element: post,
        title,
        description,
        tags,
        searchText: title + ' ' + description + ' ' + tags.join(' ')
      });
      
      tags.forEach(tag => allTags.add(tag));
    });
    
    // Create tag filter buttons
    function createTagFilters() {
      tagFilters.innerHTML = '';
      
      // All button
      const allButton = document.createElement('button');
      allButton.textContent = 'All';
      allButton.className = 'px-3 py-1 rounded-full text-sm font-medium transition-colors bg-blue-100 text-blue-800 border border-blue-200';
      allButton.onclick = () => clearFilters();
      tagFilters.appendChild(allButton);
      
      // Tag buttons
      Array.from(allTags).sort().forEach(tag => {
        const button = document.createElement('button');
        button.textContent = '#' + tag;
        button.className = 'px-3 py-1 rounded-full text-sm font-medium transition-colors bg-gray-100 text-gray-700 border border-gray-200 hover:bg-gray-200';
        button.onclick = () => toggleTagFilter(tag, button);
        tagFilters.appendChild(button);
      });
    }
    
    // Toggle tag filter
    function toggleTagFilter(tag, button) {
      if (activeFilters.has(tag)) {
        activeFilters.delete(tag);
        button.className = 'px-3 py-1 rounded-full text-sm font-medium transition-colors bg-gray-100 text-gray-700 border border-gray-200 hover:bg-gray-200';
      } else {
        activeFilters.add(tag);
        button.className = 'px-3 py-1 rounded-full text-sm font-medium transition-colors bg-blue-100 text-blue-800 border border-blue-200';
      }
      
      updateAllButton();
      filterPosts();
    }
    
    // Clear all filters
    function clearFilters() {
      activeFilters.clear();
      searchInput.value = '';
      updateAllButton();
      updateTagButtons();
      filterPosts();
    }
    
    // Update All button state
    function updateAllButton() {
      const allButton = tagFilters.querySelector('button');
      if (activeFilters.size === 0 && !searchInput.value.trim()) {
        allButton.className = 'px-3 py-1 rounded-full text-sm font-medium transition-colors bg-blue-100 text-blue-800 border border-blue-200';
      } else {
        allButton.className = 'px-3 py-1 rounded-full text-sm font-medium transition-colors bg-gray-100 text-gray-700 border border-gray-200 hover:bg-gray-200';
      }
    }
    
    // Update tag button states
    function updateTagButtons() {
      const buttons = tagFilters.querySelectorAll('button:not(:first-child)');
      buttons.forEach(button => {
        const tag = button.textContent.replace('#', '').toLowerCase();
        if (activeFilters.has(tag)) {
          button.className = 'px-3 py-1 rounded-full text-sm font-medium transition-colors bg-blue-100 text-blue-800 border border-blue-200';
        } else {
          button.className = 'px-3 py-1 rounded-full text-sm font-medium transition-colors bg-gray-100 text-gray-700 border border-gray-200 hover:bg-gray-200';
        }
      });
    }
    
    // Filter posts based on search and tag filters
    function filterPosts() {
      const searchTerm = searchInput.value.toLowerCase().trim();
      let visibleCount = 0;
      
      allPosts.forEach(post => {
        let matches = true;
        
        // Check search term
        if (searchTerm && !post.searchText.includes(searchTerm)) {
          matches = false;
        }
        
        // Check tag filters
        if (activeFilters.size > 0) {
          const hasActiveTag = Array.from(activeFilters).some(filter => 
            post.tags.includes(filter)
          );
          if (!hasActiveTag) {
            matches = false;
          }
        }
        
        if (matches) {
          post.element.style.display = '';
          visibleCount++;
        } else {
          post.element.style.display = 'none';
        }
      });
      
      // Update results count
      if (visibleCount === allPosts.length) {
        resultsCount.textContent = `Showing all ${allPosts.length} articles`;
      } else {
        resultsCount.textContent = `Showing ${visibleCount} of ${allPosts.length} articles`;
      }
    }
    
    // Search input event listener
    searchInput.addEventListener('input', function() {
      updateAllButton();
      filterPosts();
    });
    
    // Initialize
    createTagFilters();
    filterPosts();
  });
</script>