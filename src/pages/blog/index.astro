---
export const prerender = true;

import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import BlogSearch from '../../components/BlogSearch.astro';
import { calculateReadingTime, formatReadingTime } from '../../utils/readingTime';

const allPosts = await getCollection('blog');

// Filter out draft posts and sort by publication date (newest first)
const publishedPosts = await Promise.all(
  allPosts
    .filter(post => !post.data.draft)
    .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
    .map(async (post) => {
      const { Content } = await post.render();
      const readingTime = calculateReadingTime(post.body);
      return { ...post, readingTime };
    })
);

function formatDate(date: Date) {
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}
---

<BaseLayout title="TestBot Chronicles">
  <!-- Hero Section -->
  <section class="relative py-16 bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900">
    <!-- Grid pattern overlay -->
    <div class="absolute inset-0 bg-[url('data:image/svg+xml,%3Csvg width=\"60\" height=\"60\" xmlns=\"http://www.w3.org/2000/svg\"%3E%3Cdefs%3E%3Cpattern id=\"grid\" width=\"60\" height=\"60\" patternUnits=\"userSpaceOnUse\"%3E%3Cpath d=\"M 60 0 L 0 0 0 60\" fill=\"none\" stroke=\"rgba(255,255,255,0.03)\" stroke-width=\"1\"/%3E%3C/pattern%3E%3C/defs%3E%3Crect width=\"100%25\" height=\"100%25\" fill=\"url(%23grid)\"/%3E%3C/svg%3E')]\"></div>
    
    <div class="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center">
        <div class="flex justify-center mb-6">
          <img src="/images/brand/titusLogo.png" alt="TestBot Chronicles" class="h-16 w-auto opacity-90" />
        </div>
        <h1 class="text-4xl md:text-5xl font-bold text-white mb-4">
          <span class="gradient-text">TestBot Chronicles</span>
        </h1>
        <p class="text-xl text-gray-300 mb-8 max-w-2xl mx-auto">
          Where testing meets innovation. Insights, tutorials, and deep-dives into the world of automated testing and quality assurance.
        </p>
        <div class="flex justify-center space-x-4 text-sm text-gray-400">
          <span>[+] {publishedPosts.length} articles published</span>
          <span>[*] Updated weekly</span>
          <span>[>] Tips & tutorials</span>
        </div>
      </div>
    </div>
  </section>

  <!-- Blog Posts -->
  <section class="py-16 bg-white">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      {publishedPosts.length === 0 ? (
        <div class="text-center py-16">
          <div class="bg-terminal-bg/5 rounded-lg p-8 max-w-md mx-auto">
            <p class="text-gray-600 mb-4">No posts published yet.</p>
            <p class="text-sm text-gray-500">Check back soon for testing insights and tutorials!</p>
          </div>
        </div>
      ) : (
        <>
          <BlogSearch />
          <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
            {publishedPosts.map((post) => (
              <article class="blog-post-card group bg-white rounded-xl border border-gray-200 hover:border-blue-300 hover:shadow-xl transition-all duration-300 overflow-hidden">
                {post.data.heroImage && (
                  <div class="relative h-48 overflow-hidden bg-gray-100">
                    <img 
                      src={post.data.heroImage} 
                      alt={post.data.title}
                      class="w-full h-full object-contain group-hover:scale-105 transition-transform duration-300"
                      loading="lazy"
                    />
                  </div>
                )}
                <div class="p-6">
                  <div class="flex items-center justify-between text-sm text-gray-500 mb-3">
                    <div class="flex items-center">
                      <time datetime={post.data.pubDate.toISOString()}>
                        {formatDate(post.data.pubDate)}
                      </time>
                      {post.data.updatedDate && (
                        <span class="ml-2 text-xs">
                          (Updated: {formatDate(post.data.updatedDate)})
                        </span>
                      )}
                    </div>
                    <span class="text-xs font-medium text-blue-600">
                      {formatReadingTime(post.readingTime)}
                    </span>
                  </div>
                  
                  {post.data.category && (
                    <div class="mb-3">
                      <span class="post-category inline-block bg-blue-50 text-blue-700 text-xs font-semibold px-2 py-1 rounded-md border border-blue-200">
                        {post.data.category}
                      </span>
                    </div>
                  )}
                  
                  <h2 class="text-xl font-bold text-gray-900 mb-3 group-hover:text-blue-600 transition-colors">
                    <a href={`/blog/${post.slug}/`} class="hover:underline">
                      {post.data.title}
                    </a>
                  </h2>
                  
                  <p class="post-description text-gray-600 mb-4 line-clamp-3">
                    {post.data.description}
                  </p>
                  
                  {post.data.tags && post.data.tags.length > 0 && (
                    <div class="flex flex-wrap gap-2 mb-4">
                      {post.data.tags.slice(0, 3).map((tag) => (
                        <span class="post-tag inline-block bg-blue-100 text-blue-700 text-xs font-medium px-2 py-1 rounded">
                          {tag}
                        </span>
                      ))}
                      {post.data.tags.length > 3 && (
                        <span class="text-xs text-gray-500">
                          +{post.data.tags.length - 3} more
                        </span>
                      )}
                    </div>
                  )}
                  
                  <a 
                    href={`/blog/${post.slug}/`}
                    class="inline-flex items-center text-blue-600 hover:text-blue-700 font-medium text-sm group-hover:translate-x-1 transition-transform"
                  >
                    Read article
                    <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                    </svg>
                  </a>
                </div>
              </article>
            ))}
          </div>
        </>
      )}
    </div>
  </section>

  <!-- Newsletter/Contact Section -->
  <section class="py-16 bg-gray-50">
    <div class="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
      <div class="bg-white rounded-2xl shadow-lg p-8 border border-gray-200">
        <div class="flex justify-center mb-6">
          <img src="/images/brand/titusLogo.png" alt="Titus Consulting" class="h-12 w-auto opacity-80" />
        </div>
        <h2 class="text-2xl font-bold text-gray-900 mb-4">Stay Connected</h2>
        <p class="text-gray-600 mb-6">
          Get notified when I publish new testing insights and tutorials.
        </p>
        <div class="space-y-4">
          <a 
            href="/#contact" 
            class="inline-block bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition font-semibold"
          >
            Get In Touch
          </a>
          <p class="text-sm text-gray-500">
            Or reach out directly at 
            <a href="mailto:quentin@titusconsulting.be" class="text-blue-600 hover:text-blue-700">
              quentin@titusconsulting.be
            </a>
          </p>
        </div>
      </div>
    </div>
  </section>
</BaseLayout>

<style>
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .gradient-text {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }
</style>