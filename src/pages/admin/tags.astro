---
export const prerender = false;

import { getCollection } from 'astro:content';
import AdminLayout from '../../layouts/AdminLayout.astro';

// Get all posts and analyze tags
const allPosts = await getCollection('blog');
const tagStats = new Map();

allPosts.forEach(post => {
  (post.data.tags || []).forEach(tag => {
    if (tagStats.has(tag)) {
      const current = tagStats.get(tag);
      tagStats.set(tag, {
        count: current.count + 1,
        posts: [...current.posts, { slug: post.slug, title: post.data.title, draft: post.data.draft }]
      });
    } else {
      tagStats.set(tag, {
        count: 1,
        posts: [{ slug: post.slug, title: post.data.title, draft: post.data.draft }]
      });
    }
  });
});

// Sort tags by usage count
const sortedTags = Array.from(tagStats.entries())
  .sort(([,a], [,b]) => b.count - a.count);
---

<AdminLayout title="Tag Management">
  <div class="mb-6">
    <div class="flex items-center justify-between">
      <h1 class="text-3xl font-bold text-gray-900">Tag Management</h1>
      <a href="/admin" class="admin-button admin-button-secondary">
        <svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
        </svg>
        Back to Dashboard
      </a>
    </div>
  </div>

  <!-- Tag Statistics -->
  <div class="mb-8">
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
      <div class="admin-card">
        <div class="text-2xl font-bold text-blue-600">{sortedTags.length}</div>
        <div class="text-sm text-gray-600">Total Tags</div>
      </div>
      <div class="admin-card">
        <div class="text-2xl font-bold text-green-600">
          {sortedTags.length > 0 ? Math.max(...sortedTags.map(([,stats]) => stats.count)) : 0}
        </div>
        <div class="text-sm text-gray-600">Most Used Tag</div>
      </div>
      <div class="admin-card">
        <div class="text-2xl font-bold text-purple-600">
          {sortedTags.filter(([,stats]) => stats.count === 1).length}
        </div>
        <div class="text-sm text-gray-600">Single-Use Tags</div>
      </div>
    </div>
  </div>

  <!-- Add New Tag -->
  <div class="admin-card mb-8">
    <h2 class="text-xl font-semibold text-gray-900 mb-4">Create New Tag</h2>
    <div class="flex gap-4">
      <div class="flex-1">
        <input
          type="text"
          id="newTagInput"
          class="admin-input"
          placeholder="Enter new tag name..."
          onkeypress="if(event.key==='Enter'){createNewTag();}"
        />
      </div>
      <button onclick="createNewTag()" class="admin-button admin-button-primary">
        Create Tag
      </button>
    </div>
    <p class="text-sm text-gray-500 mt-2">
      Tags will be automatically formatted (lowercase, spaces replaced with hyphens)
    </p>
  </div>

  <!-- Tags List -->
  <div class="admin-card">
    <h2 class="text-xl font-semibold text-gray-900 mb-4">All Tags</h2>
    
    {sortedTags.length === 0 ? (
      <div class="text-center py-8 text-gray-500">
        <p>No tags found.</p>
        <p class="text-sm">Tags will appear here once you create blog posts with tags.</p>
      </div>
    ) : (
      <div class="space-y-4">
        {sortedTags.map(([tag, stats]) => (
          <div class="border border-gray-200 rounded-lg p-4 hover:bg-gray-50 transition">
            <div class="flex items-center justify-between mb-2">
              <div class="flex items-center space-x-3">
                <span class="inline-block bg-blue-100 text-blue-800 px-3 py-1 rounded-full font-medium">
                  {tag}
                </span>
                <span class="text-sm text-gray-500">
                  {stats.count} post{stats.count !== 1 ? 's' : ''}
                </span>
              </div>
              <div class="flex space-x-2">
                <button 
                  onclick={`editTag('${tag}')`}
                  class="text-sm text-blue-600 hover:text-blue-800 font-medium"
                >
                  Rename
                </button>
                <button 
                  onclick={`deleteTag('${tag}')`}
                  class="text-sm text-red-600 hover:text-red-800 font-medium"
                >
                  Delete
                </button>
              </div>
            </div>
            
            <!-- Posts using this tag -->
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-700 mb-2">Used in:</p>
              <div class="space-y-1">
                {stats.posts.map(post => (
                  <div class="flex items-center justify-between">
                    <a 
                      href={`/blog/${post.slug}`}
                      class="text-sm text-blue-600 hover:text-blue-800 hover:underline"
                    >
                      {post.title}
                    </a>
                    <div class="flex items-center space-x-2">
                      {post.draft && (
                        <span class="text-xs bg-yellow-100 text-yellow-800 px-2 py-1 rounded">
                          Draft
                        </span>
                      )}
                      <a 
                        href={`/admin/edit/${post.slug}`}
                        class="text-xs text-gray-500 hover:text-gray-700"
                      >
                        Edit
                      </a>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        ))}
      </div>
    )}
  </div>

  <!-- Bulk Tag Operations -->
  {sortedTags.length > 0 && (
    <div class="admin-card mt-8">
      <h2 class="text-xl font-semibold text-gray-900 mb-4">Bulk Operations</h2>
      <div class="space-y-4">
        <div>
          <h3 class="font-medium text-gray-700 mb-2">Clean Up Single-Use Tags</h3>
          <p class="text-sm text-gray-600 mb-3">
            Remove tags that are only used in one post to keep your tag system organized.
          </p>
          <button 
            onclick="cleanupSingleUseTags()"
            class="admin-button admin-button-secondary"
          >
            Remove {sortedTags.filter(([,stats]) => stats.count === 1).length} Single-Use Tags
          </button>
        </div>
        
        <div>
          <h3 class="font-medium text-gray-700 mb-2">Export Tags</h3>
          <p class="text-sm text-gray-600 mb-3">
            Export all tags as JSON for backup or migration purposes.
          </p>
          <button 
            onclick="exportTags()"
            class="admin-button admin-button-secondary"
          >
            Export Tags as JSON
          </button>
        </div>
      </div>
    </div>
  )}
</AdminLayout>

<script define:vars={{ tagData: Object.fromEntries(tagStats) }}>
  function createNewTag() {
    const input = document.getElementById('newTagInput');
    const tagName = input.value.trim().toLowerCase().replace(/\s+/g, '-');
    
    if (!tagName) {
      alert('Please enter a tag name.');
      return;
    }
    
    if (tagData[tagName]) {
      alert('This tag already exists.');
      return;
    }
    
    // TODO: Implement tag creation API
    alert(`Tag "${tagName}" would be created.\n\nNote: API integration needed for actual functionality.`);
    input.value = '';
  }

  function editTag(oldTag) {
    const newTag = prompt(`Rename tag "${oldTag}" to:`, oldTag);
    if (newTag && newTag !== oldTag) {
      const formattedTag = newTag.trim().toLowerCase().replace(/\s+/g, '-');
      if (tagData[formattedTag]) {
        alert('A tag with this name already exists.');
        return;
      }
      
      // TODO: Implement tag rename API
      alert(`Tag "${oldTag}" would be renamed to "${formattedTag}".\n\nNote: API integration needed for actual functionality.`);
    }
  }

  function deleteTag(tag) {
    const stats = tagData[tag];
    const confirmMessage = `Are you sure you want to delete the tag "${tag}"?\n\nThis will remove it from ${stats.count} post${stats.count !== 1 ? 's' : ''}:\n${stats.posts.map(p => '• ' + p.title).join('\n')}`;
    
    if (confirm(confirmMessage)) {
      // TODO: Implement tag deletion API
      alert(`Tag "${tag}" would be deleted from all posts.\n\nNote: API integration needed for actual functionality.`);
    }
  }

  function cleanupSingleUseTags() {
    const singleUseTags = Object.entries(tagData).filter(([,stats]) => stats.count === 1);
    
    if (singleUseTags.length === 0) {
      alert('No single-use tags found.');
      return;
    }
    
    const confirmMessage = `Remove ${singleUseTags.length} single-use tags?\n\nTags to be removed:\n${singleUseTags.map(([tag]) => '• ' + tag).join('\n')}`;
    
    if (confirm(confirmMessage)) {
      // TODO: Implement bulk tag cleanup API
      alert(`${singleUseTags.length} single-use tags would be removed.\n\nNote: API integration needed for actual functionality.`);
    }
  }

  function exportTags() {
    const exportData = {
      exportDate: new Date().toISOString(),
      tags: Object.entries(tagData).map(([tag, stats]) => ({
        name: tag,
        count: stats.count,
        posts: stats.posts.map(p => ({ slug: p.slug, title: p.title }))
      }))
    };
    
    const dataStr = JSON.stringify(exportData, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = `testbot-chronicles-tags-${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  }
</script>