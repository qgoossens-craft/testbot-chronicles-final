---
export const prerender = false;

import AdminLayout from '../../layouts/AdminLayout.astro';
import { getCollection } from 'astro:content';

// Get all existing tags for the tag selector
const allPosts = await getCollection('blog');
const existingTags = [...new Set(allPosts.flatMap(post => post.data.tags || []))];
---

<AdminLayout title="New Post">
  <!-- Sticky Action Bar -->
  <div class="sticky top-16 z-40 bg-white border-b-2 border-gray-300 shadow-md mb-8 -mx-8 px-8 py-4">
    <div class="flex items-center justify-between">
      <div class="flex items-center space-x-4">
        <a href="/admin" class="text-gray-600 hover:text-blue-600 text-sm flex items-center font-medium border border-gray-300 px-3 py-2 rounded-lg hover:border-blue-300 hover:bg-blue-50 transition-all">
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
          </svg>
          Back to Dashboard
        </a>
        <div class="h-6 w-px bg-gray-300"></div>
        <div class="flex items-center space-x-2">
          <div class="flex items-center text-sm bg-gray-100 px-3 py-2 rounded-lg border border-gray-300">
            <svg class="w-4 h-4 mr-2 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
            </svg>
            <span class="text-gray-700 font-medium">Creating New Post</span>
          </div>
        </div>
      </div>
      
      <div class="flex items-center space-x-3">
        <!-- Quick actions -->
        <button id="preview-btn" class="text-gray-600 hover:text-blue-600 text-sm flex items-center font-medium border border-gray-300 px-3 py-2 rounded-lg hover:border-blue-300 hover:bg-blue-50 transition-all">
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
          </svg>
          Preview
        </button>
        
        <button onclick="saveDraft()" class="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition text-sm font-medium shadow-md border-2 border-gray-600 hover:border-gray-700">
          Save Draft
        </button>
        
        <button type="submit" form="post-form" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition text-sm font-medium shadow-md border-2 border-blue-600 hover:border-blue-700">
          Publish Post
        </button>
      </div>
    </div>
  </div>

  <!-- Main Editor Layout -->
  <div class="grid grid-cols-1 xl:grid-cols-4 gap-8">
    <!-- Main Content Area -->
    <div class="xl:col-span-3 space-y-6">
      <form id="post-form">
        <!-- Post Title -->
        <div class="bg-white rounded-xl border-2 border-gray-300 shadow-lg p-6 hover:border-blue-300 transition-colors">
          <label class="block text-sm font-semibold text-gray-700 mb-2">Post Title</label>
          <input
            type="text"
            id="title"
            name="title"
            required
            class="w-full text-3xl font-bold border-2 border-gray-200 rounded-lg px-4 py-3 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all placeholder-gray-400"
            placeholder="Enter your amazing post title..."
          />
        </div>

        <!-- Content Editor with Tabs -->
        <div class="bg-white rounded-xl border-2 border-gray-300 shadow-lg overflow-hidden">
          <!-- Editor Tabs -->
          <div class="border-b-2 border-gray-300 bg-gradient-to-r from-gray-50 to-gray-100">
            <nav class="flex space-x-1 px-6 py-3" aria-label="Tabs">
              <button type="button" id="write-tab" class="editor-tab active">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                </svg>
                Write
              </button>
              <button type="button" id="preview-tab" class="editor-tab">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                </svg>
                Preview
              </button>
              <button type="button" id="split-tab" class="editor-tab">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4"></path>
                </svg>
                Split View
              </button>
            </nav>
          </div>

          <!-- Editor Content -->
          <div class="relative">
            <!-- Write Mode -->
            <div id="write-mode" class="editor-mode active">
              <div class="relative">
                <!-- Editor Toolbar -->
                <div class="border-b-2 border-gray-300 px-6 py-4 bg-gradient-to-r from-gray-100 to-gray-50">
                  <div class="flex items-center justify-between">
                    <div class="flex items-center space-x-2">
                      <div class="flex items-center space-x-1 bg-white rounded-lg border border-gray-300 p-1 shadow-sm">
                        <button type="button" class="toolbar-btn" data-action="bold" title="Bold (Ctrl+B)">
                          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 4h8a4 4 0 014 4 4 4 0 01-4 4H6z"></path>
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 12h9a4 4 0 014 4 4 4 0 01-4 4H6z"></path>
                          </svg>
                        </button>
                        <button type="button" class="toolbar-btn" data-action="italic" title="Italic (Ctrl+I)">
                          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 4l-2 14m4-14l-2 14"></path>
                          </svg>
                        </button>
                        <button type="button" class="toolbar-btn" data-action="link" title="Link (Ctrl+K)">
                          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path>
                          </svg>
                        </button>
                      </div>
                      
                      <div class="flex items-center space-x-1 bg-white rounded-lg border border-gray-300 p-1 shadow-sm">
                        <button type="button" class="toolbar-btn" data-action="heading" title="Heading">
                          <span class="font-bold text-sm">H</span>
                        </button>
                        <button type="button" class="toolbar-btn" data-action="code" title="Code Block">
                          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"></path>
                          </svg>
                        </button>
                        <button type="button" class="toolbar-btn" data-action="quote" title="Quote">
                          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                          </svg>
                        </button>
                      </div>
                    </div>
                    
                    <div class="bg-white px-3 py-2 rounded-lg border border-gray-300 shadow-sm">
                      <div class="text-xs font-medium text-gray-600">
                        <span id="word-count">0 words</span> â€¢ <span id="char-count">0 chars</span>
                      </div>
                    </div>
                  </div>
                </div>
                
                <!-- Text Editor -->
                <div class="relative">
                  <textarea
                    id="content"
                    name="content"
                    class="w-full h-96 pl-16 pr-6 py-6 border-2 border-gray-200 border-t-0 outline-none resize-none font-mono text-base leading-7 focus:border-blue-400 focus:ring-4 focus:ring-blue-100 transition-all bg-gradient-to-br from-white to-gray-50 text-gray-800"
                    placeholder="# Your Amazing Post Title

Start writing your markdown content here...

## Tips for great content:
- Use **bold** and *italic* text for emphasis
- Add [links](https://example.com) to external resources
- Include `code snippets` for technical content
- Create > blockquotes for important notes

Happy writing! ðŸš€"
                    spellcheck="true"
                  ></textarea>
                  
                  <!-- Line numbers overlay -->
                  <div id="line-numbers" class="absolute left-0 top-0 w-12 h-96 bg-gray-100 border-r-2 border-gray-300 text-xs text-gray-500 font-mono pt-6 pl-2 pointer-events-none select-none overflow-hidden">
                    <!-- Line numbers will be generated by JavaScript -->
                  </div>
                </div>
              </div>
            </div>

            <!-- Preview Mode -->
            <div id="preview-mode" class="editor-mode hidden">
              <div class="relative">
                <!-- Preview Header -->
                <div class="border-b-2 border-gray-300 px-6 py-4 bg-gradient-to-r from-green-50 to-emerald-50">
                  <div class="flex items-center justify-between">
                    <div class="flex items-center">
                      <svg class="w-5 h-5 mr-2 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                      </svg>
                      <span class="font-bold text-green-700">Live Preview</span>
                    </div>
                    <div class="bg-white px-3 py-1 rounded-lg border-2 border-green-200 shadow-sm">
                      <span class="text-xs font-medium text-green-700">Real-time rendering</span>
                    </div>
                  </div>
                </div>
                
                <!-- Preview Content -->
                <div id="preview-content" class="p-8 prose prose-lg max-w-none min-h-96 border-2 border-gray-200 border-t-0 bg-gradient-to-br from-white via-gray-50 to-white">
                  <div class="text-center py-16">
                    <svg class="w-16 h-16 mx-auto text-gray-300 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                    </svg>
                    <p class="text-xl text-gray-400 font-medium">Your preview will appear here</p>
                    <p class="text-gray-400 mt-2">Start typing in the editor to see live markdown rendering</p>
                  </div>
                </div>
              </div>
            </div>

            <!-- Split Mode -->
            <div id="split-mode" class="editor-mode hidden">
              <div class="grid grid-cols-2 divide-x-2 divide-gray-400 border-2 border-gray-200 border-t-0 min-h-96">
                <!-- Editor Side -->
                <div class="relative bg-gradient-to-br from-slate-50 to-blue-50">
                  <div class="border-b-2 border-gray-300 px-4 py-3 bg-gradient-to-r from-blue-100 to-indigo-100 sticky top-0 z-10">
                    <div class="flex items-center justify-between">
                      <div class="flex items-center">
                        <svg class="w-5 h-5 mr-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                        </svg>
                        <span class="font-bold text-blue-700">Markdown Editor</span>
                      </div>
                      <div class="bg-white px-2 py-1 rounded border border-blue-200 shadow-sm">
                        <span class="text-xs font-medium text-blue-600">Raw Text</span>
                      </div>
                    </div>
                  </div>
                  
                  <div class="relative">
                    <textarea
                      id="split-content"
                      class="w-full h-96 pl-16 pr-4 py-4 border-none outline-none resize-none font-mono text-sm leading-6 focus:ring-4 focus:ring-blue-100 transition-all bg-transparent text-gray-800"
                      placeholder="Start typing your markdown here...

# Heading 1
## Heading 2

**Bold text** and *italic text*

- List item 1
- List item 2

> Blockquote for important notes

```javascript
// Code block example
console.log('Hello World!');
```"
                      spellcheck="true"
                    ></textarea>
                    
                    <!-- Line numbers for split view -->
                    <div id="split-line-numbers" class="absolute left-0 top-0 w-14 h-96 bg-blue-100 border-r border-blue-200 text-xs text-blue-600 font-mono pt-4 pl-2 pointer-events-none select-none overflow-hidden">
                      <!-- Line numbers will be generated by JavaScript -->
                    </div>
                  </div>
                </div>
                
                <!-- Preview Side -->
                <div class="relative bg-gradient-to-br from-white to-emerald-50">
                  <div class="border-b-2 border-gray-300 px-4 py-3 bg-gradient-to-r from-emerald-100 to-green-100 sticky top-0 z-10">
                    <div class="flex items-center justify-between">
                      <div class="flex items-center">
                        <svg class="w-5 h-5 mr-2 text-emerald-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 616 0z"></path>
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                        </svg>
                        <span class="font-bold text-emerald-700">Live Preview</span>
                      </div>
                      <div class="bg-white px-2 py-1 rounded border border-emerald-200 shadow-sm">
                        <span class="text-xs font-medium text-emerald-600">Rendered</span>
                      </div>
                    </div>
                  </div>
                  
                  <div id="split-preview" class="p-6 prose prose-sm max-w-none h-96 overflow-y-auto bg-white/80 backdrop-blur-sm">
                    <div class="text-center py-8">
                      <svg class="w-12 h-12 mx-auto text-gray-300 mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                      </svg>
                      <p class="text-gray-400 font-medium">Preview appears here</p>
                      <p class="text-xs text-gray-400 mt-1">Real-time markdown rendering</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </form>
    </div>

    <!-- Sidebar -->
    <div class="xl:col-span-1 space-y-6">
      <!-- Post Details -->
      <div class="bg-white rounded-xl border-2 border-gray-300 shadow-lg p-6 hover:border-green-300 transition-colors">
        <h3 class="text-lg font-bold text-gray-900 mb-4 flex items-center border-b-2 border-gray-200 pb-2">
          <svg class="w-5 h-5 mr-2 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
          Post Details
        </h3>
        
        <div class="space-y-4">
          <div class="bg-gray-50 p-4 rounded-lg border border-gray-200">
            <label class="block text-sm font-medium text-gray-700 mb-2">Description</label>
            <textarea
              id="description"
              name="description"
              required
              rows="3"
              maxlength="160"
              class="w-full text-sm border-2 border-gray-300 rounded-lg px-3 py-2 focus:border-green-500 focus:ring-2 focus:ring-green-200 resize-none"
              placeholder="Brief description for SEO and previews..."
            ></textarea>
            <div class="text-xs font-medium text-gray-500 mt-2 flex justify-between">
              <span>Used for search engines and social previews</span>
              <span id="desc-count" class="bg-white px-2 py-1 rounded border">0/160</span>
            </div>
          </div>

          <div class="bg-gray-50 p-4 rounded-lg border border-gray-200">
            <label class="block text-sm font-medium text-gray-700 mb-2">Publication Date</label>
            <input
              type="date"
              id="pubDate"
              name="pubDate"
              required
              class="w-full text-sm border-2 border-gray-300 rounded-lg px-3 py-2 focus:border-green-500 focus:ring-2 focus:ring-green-200"
            />
          </div>

          <div class="bg-gray-50 p-4 rounded-lg border border-gray-200">
            <div class="flex items-center justify-between">
              <span class="text-sm font-medium text-gray-700">Status:</span>
              <select id="draft" name="draft" class="text-sm border-2 border-gray-300 rounded-lg px-2 py-1 focus:border-green-500 focus:ring-2 focus:ring-green-200">
                <option value="true">Draft</option>
                <option value="false">Published</option>
              </select>
            </div>
          </div>

          <div class="bg-gray-50 p-4 rounded-lg border border-gray-200">
            <label class="block text-sm font-medium text-gray-700 mb-2">Featured Image URL:</label>
            <input
              type="url"
              id="heroImage"
              name="heroImage"
              class="w-full text-sm border-2 border-gray-300 rounded-lg px-3 py-2 focus:border-green-500 focus:ring-2 focus:ring-green-200"
              placeholder="https://example.com/image.jpg"
            />
            <div class="text-xs text-gray-500 mt-1">Used for social media previews and blog listing</div>
          </div>
        </div>
      </div>

      <!-- Tags -->
      <div class="bg-white rounded-xl border-2 border-gray-300 shadow-lg p-6 hover:border-blue-300 transition-colors">
        <h3 class="text-lg font-bold text-gray-900 mb-4 flex items-center border-b-2 border-gray-200 pb-2">
          <svg class="w-5 h-5 mr-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
          </svg>
          Tags
        </h3>
        
        <div class="space-y-4">
          <!-- Tag Input -->
          <div class="bg-gray-50 p-4 rounded-lg border border-gray-200">
            <div class="flex">
              <input
                type="text"
                id="newTag"
                class="flex-1 text-sm border-2 border-gray-300 rounded-l-lg px-3 py-2 focus:border-blue-500 focus:ring-2 focus:ring-blue-200"
                placeholder="Add a tag..."
                onkeypress="if(event.key==='Enter'){event.preventDefault();addNewTag();}"
              />
              <button type="button" onclick="addNewTag()" class="bg-blue-600 text-white px-4 py-2 rounded-r-lg text-sm font-medium hover:bg-blue-700 border-2 border-blue-600 hover:border-blue-700 transition-all">
                Add
              </button>
            </div>
          </div>

          <!-- Popular Tags -->
          {existingTags.length > 0 && (
            <div class="bg-gray-50 p-4 rounded-lg border border-gray-200">
              <div class="text-sm font-medium text-gray-700 mb-3 flex items-center">
                <svg class="w-4 h-4 mr-1 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
                </svg>
                Popular tags:
              </div>
              <div class="flex flex-wrap gap-2">
                {existingTags.slice(0, 10).map((tag) => (
                  <button
                    type="button"
                    onclick={`addTag('${tag}')`}
                    class="text-xs bg-white border-2 border-gray-300 hover:border-blue-400 hover:bg-blue-50 text-gray-700 hover:text-blue-700 px-3 py-1 rounded-lg transition-all font-medium shadow-sm"
                  >
                    #{tag}
                  </button>
                ))}
              </div>
            </div>
          )}

          <!-- Selected Tags -->
          <div class="bg-gray-50 p-4 rounded-lg border border-gray-200">
            <div class="text-sm font-medium text-gray-700 mb-3">Selected tags:</div>
            <div id="selectedTags" class="min-h-12 border-2 border-gray-300 rounded-lg p-3 bg-white">
              <span class="text-sm text-gray-400">No tags selected</span>
            </div>
            <input type="hidden" id="tags" name="tags" />
          </div>
        </div>
      </div>

      <!-- Statistics -->
      <div class="bg-white rounded-xl border-2 border-gray-300 shadow-lg p-6 hover:border-orange-300 transition-colors">
        <h3 class="text-lg font-bold text-gray-900 mb-4 flex items-center border-b-2 border-gray-200 pb-2">
          <svg class="w-5 h-5 mr-2 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
          </svg>
          Statistics
        </h3>
        
        <div class="grid grid-cols-2 gap-3 text-sm">
          <div class="bg-gray-50 p-3 rounded-lg border border-gray-200">
            <div class="text-gray-600 text-xs font-medium mb-1">Words</div>
            <div id="stats-words" class="text-lg font-bold text-gray-900">0</div>
          </div>
          <div class="bg-gray-50 p-3 rounded-lg border border-gray-200">
            <div class="text-gray-600 text-xs font-medium mb-1">Characters</div>
            <div id="stats-chars" class="text-lg font-bold text-gray-900">0</div>
          </div>
          <div class="bg-gray-50 p-3 rounded-lg border border-gray-200">
            <div class="text-gray-600 text-xs font-medium mb-1">Reading time</div>
            <div id="reading-time" class="text-lg font-bold text-orange-600">0 min</div>
          </div>
          <div class="bg-gray-50 p-3 rounded-lg border border-gray-200">
            <div class="text-gray-600 text-xs font-medium mb-1">Created</div>
            <div id="created-date" class="text-sm font-bold text-gray-900">Today</div>
          </div>
        </div>
      </div>
    </div>
  </div>
</AdminLayout>

<script>
  // Initialize editor state
  let selectedTags = [];
  let currentContent = '';

  // Initialize when page loads
  document.addEventListener('DOMContentLoaded', function() {
    initializeEditor();
    updateTagsDisplay();
    updatePreview();
    updateStatistics();
    setupFormDefaults();
  });

  function setupFormDefaults() {
    // Set default publication date to today
    const today = new Date().toISOString().split('T')[0];
    document.getElementById('pubDate').value = today;
    
    // Update created date display
    document.getElementById('created-date').textContent = today;
    
    // Description character counter
    document.getElementById('description').addEventListener('input', function() {
      document.getElementById('desc-count').textContent = this.value.length + '/160';
    });
  }

  function initializeEditor() {
    const contentTextarea = document.getElementById('content');
    const splitTextarea = document.getElementById('split-content');
    
    // Initialize line numbers
    updateLineNumbers();
    
    // Sync content between main and split view
    contentTextarea.addEventListener('input', function() {
      splitTextarea.value = this.value;
      updatePreview();
      updateStatistics();
      updateLineNumbers();
    });
    
    splitTextarea.addEventListener('input', function() {
      contentTextarea.value = this.value;
      updatePreview();
      updateStatistics();
      updateLineNumbers();
    });

    // Update line numbers on scroll
    contentTextarea.addEventListener('scroll', syncLineNumbersScroll);
    splitTextarea.addEventListener('scroll', syncSplitLineNumbersScroll);
  }

  function updateLineNumbers() {
    const content = document.getElementById('content').value;
    const lines = content.split('\n').length;
    const lineNumbersContainer = document.getElementById('line-numbers');
    const splitLineNumbersContainer = document.getElementById('split-line-numbers');
    
    let lineNumbersHTML = '';
    for (let i = 1; i <= Math.max(lines, 20); i++) {
      lineNumbersHTML += `<div class="leading-7">${i}</div>`;
    }
    
    if (lineNumbersContainer) lineNumbersContainer.innerHTML = lineNumbersHTML;
    if (splitLineNumbersContainer) splitLineNumbersContainer.innerHTML = lineNumbersHTML;
  }

  function syncLineNumbersScroll() {
    const textarea = document.getElementById('content');
    const lineNumbers = document.getElementById('line-numbers');
    if (lineNumbers) {
      lineNumbers.scrollTop = textarea.scrollTop;
    }
  }

  function syncSplitLineNumbersScroll() {
    const textarea = document.getElementById('split-content');
    const lineNumbers = document.getElementById('split-line-numbers');
    if (lineNumbers) {
      lineNumbers.scrollTop = textarea.scrollTop;
    }
  }

  // Editor mode switching
  function switchMode(mode) {
    // Update tabs
    document.querySelectorAll('.editor-tab').forEach(tab => tab.classList.remove('active'));
    document.getElementById(mode + '-tab').classList.add('active');
    
    // Update content areas
    document.querySelectorAll('.editor-mode').forEach(area => area.classList.add('hidden'));
    document.getElementById(mode + '-mode').classList.remove('hidden');
    
    if (mode === 'split') {
      // Sync content to split view
      const content = document.getElementById('content').value;
      document.getElementById('split-content').value = content;
      updateSplitPreview();
    }
  }

  // Setup event listeners for tabs
  document.getElementById('write-tab').addEventListener('click', () => switchMode('write'));
  document.getElementById('preview-tab').addEventListener('click', () => switchMode('preview'));
  document.getElementById('split-tab').addEventListener('click', () => switchMode('split'));

  // Toolbar actions
  document.querySelectorAll('.toolbar-btn').forEach(btn => {
    btn.addEventListener('click', function() {
      const action = this.dataset.action;
      handleToolbarAction(action);
    });
  });

  function handleToolbarAction(action) {
    const textarea = document.getElementById('content');
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const selectedText = textarea.value.substring(start, end);
    let replacement = '';

    switch(action) {
      case 'bold':
        replacement = `**${selectedText || 'bold text'}**`;
        break;
      case 'italic':
        replacement = `*${selectedText || 'italic text'}*`;
        break;
      case 'heading':
        replacement = `## ${selectedText || 'Heading'}`;
        break;
      case 'link':
        replacement = `[${selectedText || 'link text'}](url)`;
        break;
      case 'code':
        if (selectedText.includes('\n')) {
          replacement = `\`\`\`\n${selectedText}\n\`\`\``;
        } else {
          replacement = `\`${selectedText || 'code'}\``;
        }
        break;
      case 'quote':
        replacement = `> ${selectedText || 'quote'}`;
        break;
    }

    if (replacement) {
      insertText(textarea, replacement, start, end);
      updatePreview();
      updateStatistics();
    }
  }

  function insertText(textarea, text, start, end) {
    const before = textarea.value.substring(0, start);
    const after = textarea.value.substring(end);
    textarea.value = before + text + after;
    
    // Set cursor position
    const newPos = start + text.length;
    textarea.setSelectionRange(newPos, newPos);
    textarea.focus();
  }

  // Preview update functions
  function updatePreview() {
    const content = document.getElementById('content').value;
    const preview = document.getElementById('preview-content');
    
    if (content.trim() === '') {
      preview.innerHTML = '<div class="text-center py-16"><svg class="w-16 h-16 mx-auto text-gray-300 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M15 12a3 3 0 11-6 0 3 3 0 616 0z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path></svg><p class="text-xl text-gray-400 font-medium">Your preview will appear here</p><p class="text-gray-400 mt-2">Start typing in the editor to see live markdown rendering</p></div>';
      return;
    }

    preview.innerHTML = convertMarkdownToHTML(content);
  }

  function updateSplitPreview() {
    const content = document.getElementById('split-content').value;
    const preview = document.getElementById('split-preview');
    
    if (content.trim() === '') {
      preview.innerHTML = '<div class="text-center py-8"><svg class="w-12 h-12 mx-auto text-gray-300 mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M15 12a3 3 0 11-6 0 3 3 0 616 0z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path></svg><p class="text-gray-400 font-medium">Preview appears here</p><p class="text-xs text-gray-400 mt-1">Real-time markdown rendering</p></div>';
      return;
    }

    preview.innerHTML = convertMarkdownToHTML(content);
  }

  function convertMarkdownToHTML(markdown) {
    if (!markdown.trim()) {
      return '<div class="text-center py-8"><p class="text-gray-400">Start typing to see your preview...</p></div>';
    }

    // Enhanced markdown to HTML conversion with better styling
    let html = markdown
      // Headers with better styling
      .replace(/^##### (.*$)/gm, '<h5 class="text-sm font-bold text-gray-700 mt-4 mb-2">$1</h5>')
      .replace(/^#### (.*$)/gm, '<h4 class="text-base font-bold text-gray-800 mt-4 mb-2">$1</h4>')
      .replace(/^### (.*$)/gm, '<h3 class="text-lg font-bold text-gray-900 mt-6 mb-3 border-b border-gray-200 pb-2">$1</h3>')
      .replace(/^## (.*$)/gm, '<h2 class="text-xl font-bold text-gray-900 mt-8 mb-4 border-b-2 border-blue-200 pb-2">$1</h2>')
      .replace(/^# (.*$)/gm, '<h1 class="text-2xl font-bold text-gray-900 mt-8 mb-6 border-b-2 border-blue-300 pb-3">$1</h1>')
      
      // Lists with better spacing
      .replace(/^\* (.*$)/gm, '<li class="ml-4 mb-1">â€¢ $1</li>')
      .replace(/^- (.*$)/gm, '<li class="ml-4 mb-1">â€¢ $1</li>')
      .replace(/^\+ (.*$)/gm, '<li class="ml-4 mb-1">â€¢ $1</li>')
      .replace(/^\d+\. (.*$)/gm, '<li class="ml-4 mb-1 list-decimal">$1</li>')
      
      // Enhanced text formatting
      .replace(/\*\*\*(.*?)\*\*\*/g, '<strong class="font-bold"><em class="italic">$1</em></strong>')
      .replace(/\*\*(.*?)\*\*/g, '<strong class="font-bold text-gray-900">$1</strong>')
      .replace(/\*(.*?)\*/g, '<em class="italic text-gray-700">$1</em>')
      .replace(/__(.*?)__/g, '<strong class="font-bold text-gray-900">$1</strong>')
      .replace(/_(.*?)_/g, '<em class="italic text-gray-700">$1</em>')
      
      // Code blocks with syntax highlighting
      .replace(/```(\w+)?\n([\s\S]*?)```/g, '<pre class="bg-gray-900 text-gray-100 p-4 rounded-lg overflow-x-auto my-4 border border-gray-700"><code class="text-sm font-mono">$2</code></pre>')
      
      // Inline code with better styling
      .replace(/`(.*?)`/g, '<code class="bg-gray-100 text-red-600 px-2 py-1 rounded text-sm font-mono border">$1</code>')
      
      // Links with hover effects
      .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" class="text-blue-600 hover:text-blue-800 underline underline-offset-2 hover:bg-blue-50 px-1 rounded transition-colors">$1</a>')
      
      // Enhanced blockquotes
      .replace(/^> (.*$)/gm, '<blockquote class="border-l-4 border-blue-400 bg-blue-50 pl-4 py-2 my-4 italic text-gray-700 rounded-r">$1</blockquote>')
      
      // Horizontal rules
      .replace(/^---$/gm, '<hr class="border-t-2 border-gray-300 my-6">')
      .replace(/^\*\*\*$/gm, '<hr class="border-t-2 border-gray-300 my-6">')
      
      // Strikethrough
      .replace(/~~(.*?)~~/g, '<del class="line-through text-gray-500">$1</del>')
      
      // Paragraphs and line breaks
      .replace(/\n\n/g, '</p><p class="mb-4">')
      .replace(/\n/g, '<br>');
    
    // Wrap in paragraphs and add base styling
    html = '<div class="prose-content">' + '<p class="mb-4">' + html + '</p>' + '</div>';
    
    // Clean up empty paragraphs
    html = html.replace(/<p class="mb-4"><\/p>/g, '');
    
    return html;
  }

  // Statistics
  function updateStatistics() {
    const content = document.getElementById('content').value;
    const words = content.trim() ? content.trim().split(/\s+/).length : 0;
    const chars = content.length;
    const readingTime = Math.ceil(words / 200); // Average reading speed

    document.getElementById('word-count').textContent = words + ' words';
    document.getElementById('char-count').textContent = chars + ' chars';
    document.getElementById('stats-words').textContent = words;
    document.getElementById('stats-chars').textContent = chars;
    document.getElementById('reading-time').textContent = readingTime + ' min';
  }

  // Tag management
  function addTag(tagName = null) {
    const input = document.getElementById('newTag');
    const tag = tagName || input.value.trim().toLowerCase().replace(/\s+/g, '-');
    
    if (tag && !selectedTags.includes(tag)) {
      selectedTags.push(tag);
      updateTagsDisplay();
      if (!tagName) input.value = '';
    }
  }

  function addNewTag() {
    addTag();
  }

  function removeTag(tag) {
    selectedTags = selectedTags.filter(t => t !== tag);
    updateTagsDisplay();
  }

  function updateTagsDisplay() {
    const container = document.getElementById('selectedTags');
    
    if (selectedTags.length === 0) {
      container.innerHTML = '<span class="text-xs text-gray-400">No tags selected</span>';
    } else {
      container.innerHTML = selectedTags.map(tag => 
        `<span class="inline-block bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded mr-1 mb-1">
          ${tag}
          <button type="button" onclick="removeTag('${tag}')" class="ml-1 text-blue-600 hover:text-blue-800">Ã—</button>
        </span>`
      ).join('');
    }
  }

  // Form actions
  function saveDraft() {
    document.getElementById('draft').value = 'true';
    submitForm('draft');
  }

  function resetForm() {
    if (confirm('Are you sure you want to reset the form? All changes will be lost.')) {
      document.getElementById('post-form').reset();
      selectedTags = [];
      updateTagsDisplay();
      updatePreview();
      updateStatistics();
      setupFormDefaults();
    }
  }

  function submitForm(action = 'publish') {
    const formData = new FormData(document.getElementById('post-form'));
    const data = Object.fromEntries(formData);
    
    // Add tags
    data.tags = selectedTags;
    data.draft = action === 'draft' ? true : (data.draft === 'true');
    
    console.log('Post data:', data);
    
    // TODO: Send to API endpoint
    alert(`${action === 'draft' ? 'Draft saved' : 'Post published'} successfully!\n\nNote: API integration needed for actual save functionality.`);
  }

  // Form submission
  document.getElementById('post-form').addEventListener('submit', function(e) {
    e.preventDefault();
    submitForm('publish');
  });

  // Make functions global for onclick handlers
  window.addTag = addTag;
  window.removeTag = removeTag;
  window.addNewTag = addNewTag;
  window.saveDraft = saveDraft;
  window.resetForm = resetForm;
</script>

<style>
  .editor-tab {
    @apply flex items-center px-4 py-2 text-sm font-semibold rounded-lg text-gray-600 hover:text-blue-600 transition-all border-2 border-transparent hover:border-blue-200 hover:bg-blue-50;
  }
  
  .editor-tab.active {
    @apply bg-white text-blue-700 shadow-lg border-2 border-blue-300 transform scale-105;
  }
  
  .toolbar-btn {
    @apply p-2 text-gray-600 hover:text-blue-600 hover:bg-blue-50 rounded-lg transition-all border border-transparent hover:border-blue-200 font-medium;
  }
  
  .toolbar-btn:hover {
    @apply shadow-sm transform scale-105;
  }
  
  .editor-mode {
    @apply transition-all duration-300;
  }
  
  .editor-mode.active {
    @apply block;
  }
  
  /* Custom scrollbar for preview */
  #split-preview::-webkit-scrollbar {
    width: 8px;
  }
  
  #split-preview::-webkit-scrollbar-track {
    background: #f1f5f9;
    border-radius: 4px;
  }
  
  #split-preview::-webkit-scrollbar-thumb {
    background: #cbd5e1;
    border-radius: 4px;
    border: 1px solid #e2e8f0;
  }
  
  #split-preview::-webkit-scrollbar-thumb:hover {
    background: #94a3b8;
    border-color: #94a3b8;
  }
  
  /* Enhanced focus styles */
  input:focus, textarea:focus, select:focus {
    @apply transform scale-[1.02];
  }
  
  /* Enhanced editor styling */
  #content, #split-content {
    font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Roboto Mono', 'Source Code Pro', monospace;
    font-feature-settings: "liga" 0;
    text-rendering: optimizeSpeed;
  }
  
  #content:focus, #split-content:focus {
    @apply shadow-lg;
  }
  
  /* Line numbers styling */
  #line-numbers, #split-line-numbers {
    user-select: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
  }
  
  /* Preview content styling */
  .prose-content {
    line-height: 1.7;
    color: #374151;
  }
  
  .prose-content h1, .prose-content h2, .prose-content h3 {
    scroll-margin-top: 2rem;
  }
  
  /* Enhanced scrollbars for all editor elements */
  #content::-webkit-scrollbar, #split-content::-webkit-scrollbar {
    width: 8px;
  }
  
  #content::-webkit-scrollbar-track, #split-content::-webkit-scrollbar-track {
    background: #f1f5f9;
    border-radius: 4px;
  }
  
  #content::-webkit-scrollbar-thumb, #split-content::-webkit-scrollbar-thumb {
    background: #cbd5e1;
    border-radius: 4px;
    border: 1px solid #e2e8f0;
  }
  
  #content::-webkit-scrollbar-thumb:hover, #split-content::-webkit-scrollbar-thumb:hover {
    background: #94a3b8;
  }
  
  /* Smooth transitions for mode switching */
  .editor-mode {
    animation: fadeIn 0.3s ease-in-out;
  }
  
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  /* Focus ring enhancements */
  textarea:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1), 0 0 0 1px rgba(59, 130, 246, 0.3);
  }

  /* Custom prose styles for preview */
  .prose h1 { @apply text-2xl font-bold mt-6 mb-4; }
  .prose h2 { @apply text-xl font-bold mt-5 mb-3; }
  .prose h3 { @apply text-lg font-bold mt-4 mb-2; }
  .prose p { @apply mb-4; }
  .prose pre { @apply bg-gray-900 text-white p-4 rounded-lg overflow-x-auto; }
  .prose code { @apply bg-gray-100 px-2 py-1 rounded text-sm; }
  .prose pre code { @apply bg-transparent px-0 py-0; }
  .prose strong { @apply font-bold; }
  .prose em { @apply italic; }
  .prose a { @apply text-blue-600 underline; }
</style>