---
export const prerender = false;

import { getCollection, type CollectionEntry } from 'astro:content';
import AdminLayout from '../../../layouts/AdminLayout.astro';
import fs from 'fs';
import path from 'path';

// Get the slug from the URL params
const { slug } = Astro.params;

// Find the post by slug
const allPosts = await getCollection('blog');
const post = allPosts.find(p => p.slug === slug);

// If post not found, return 404
if (!post) {
  return Astro.redirect('/admin?error=post-not-found');
}

// Get all existing tags for the tag selector  
const existingTags = [...new Set(allPosts.flatMap(p => p.data.tags || []))];

// Read the raw markdown content
const contentPath = path.join(process.cwd(), 'src', 'content', 'blog', `${post.slug}.md`);
let rawContent = '';
try {
  const fileContent = fs.readFileSync(contentPath, 'utf-8');
  // Extract content after frontmatter
  const parts = fileContent.split('---');
  if (parts.length >= 3) {
    rawContent = parts.slice(2).join('---').trim();
  }
} catch (error) {
  console.error('Error reading file:', error);
}

function formatDateForInput(date: Date) {
  return date.toISOString().split('T')[0];
}
---

<AdminLayout title={`Edit: ${post.data.title}`}>
  <!-- Sticky Action Bar -->
  <div class="sticky top-16 z-40 bg-white border-b border-gray-200 mb-6 -mx-8 px-8 py-4">
    <div class="flex items-center justify-between">
      <div class="flex items-center space-x-4">
        <a href="/admin" class="text-gray-500 hover:text-gray-700 text-sm flex items-center">
          <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
          </svg>
          Back to Dashboard
        </a>
        <span class="text-gray-300">•</span>
        <div class="flex items-center space-x-2">
          <div id="save-status" class="flex items-center text-sm">
            <span id="status-text" class="text-gray-500">Editing</span>
            <svg id="status-icon" class="w-4 h-4 ml-1 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
            </svg>
          </div>
        </div>
      </div>
      
      <div class="flex items-center space-x-3">
        <!-- Auto-save toggle -->
        <label class="flex items-center text-sm">
          <input type="checkbox" id="auto-save" checked class="rounded border-gray-300 text-blue-600 focus:ring-blue-500 mr-2">
          Auto-save
        </label>
        
        <!-- Quick actions -->
        <button id="preview-btn" class="text-gray-600 hover:text-gray-800 text-sm flex items-center">
          <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
          </svg>
          Preview
        </button>
        
        <button id="save-draft-btn" class="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition text-sm">
          Save Draft
        </button>
        
        <button id="publish-btn" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition text-sm">
          {post.data.draft ? 'Publish Post' : 'Update Post'}
        </button>
      </div>
    </div>
  </div>

  <!-- Main Editor Layout -->
  <div class="grid grid-cols-1 xl:grid-cols-4 gap-8">
    <!-- Main Content Area -->
    <div class="xl:col-span-3 space-y-6">
      <!-- Post Title -->
      <div class="admin-card">
        <input
          type="text"
          id="title"
          name="title"
          value={post.data.title}
          class="w-full text-3xl font-bold border-none outline-none resize-none bg-transparent placeholder-gray-400"
          placeholder="Post title..."
          data-auto-save="title"
        />
      </div>

      <!-- Content Editor with Tabs -->
      <div class="admin-card p-0 overflow-hidden">
        <!-- Editor Tabs -->
        <div class="border-b border-gray-200 bg-gray-50">
          <nav class="flex space-x-8 px-6 py-3" aria-label="Tabs">
            <button id="write-tab" class="editor-tab active">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
              </svg>
              Write
            </button>
            <button id="preview-tab" class="editor-tab">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
              </svg>
              Preview
            </button>
            <button id="split-tab" class="editor-tab">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4"></path>
              </svg>
              Split View
            </button>
          </nav>
        </div>

        <!-- Editor Content -->
        <div class="relative">
          <!-- Write Mode -->
          <div id="write-mode" class="editor-mode active">
            <div class="relative">
              <!-- Editor Toolbar -->
              <div class="border-b border-gray-200 px-6 py-3 bg-gray-50">
                <div class="flex items-center space-x-1">
                  <button class="toolbar-btn" data-action="bold" title="Bold (Ctrl+B)">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 4h8a4 4 0 014 4 4 4 0 01-4 4H6z"></path>
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 12h9a4 4 0 014 4 4 4 0 01-4 4H6z"></path>
                    </svg>
                  </button>
                  <button class="toolbar-btn" data-action="italic" title="Italic (Ctrl+I)">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 4l-2 14m4-14l-2 14"></path>
                    </svg>
                  </button>
                  <button class="toolbar-btn" data-action="link" title="Link (Ctrl+K)">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path>
                    </svg>
                  </button>
                  <span class="border-l border-gray-300 h-4 mx-2"></span>
                  <button class="toolbar-btn" data-action="heading" title="Heading">H</button>
                  <button class="toolbar-btn" data-action="code" title="Code Block">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"></path>
                    </svg>
                  </button>
                  <button class="toolbar-btn" data-action="quote" title="Quote">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                    </svg>
                  </button>
                  <span class="border-l border-gray-300 h-4 mx-2"></span>
                  <button class="toolbar-btn" data-action="undo" title="Undo (Ctrl+Z)">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6"></path>
                    </svg>
                  </button>
                  <button class="toolbar-btn" data-action="redo" title="Redo (Ctrl+Y)">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 10h-10a8 8 0 00-8 8v2M21 10l-6 6m6-6l-6-6"></path>
                    </svg>
                  </button>
                  <span class="border-l border-gray-300 h-4 mx-2"></span>
                  <div class="text-xs text-gray-500">
                    <span id="word-count">0 words</span> • <span id="char-count">0 chars</span>
                  </div>
                </div>
              </div>
              
              <!-- Text Editor -->
              <textarea
                id="content"
                name="content"
                class="w-full h-96 p-6 border-none outline-none resize-none font-mono text-sm leading-relaxed"
                placeholder="Start writing your post..."
                data-auto-save="content"
              >{rawContent}</textarea>
            </div>
          </div>

          <!-- Preview Mode -->
          <div id="preview-mode" class="editor-mode hidden">
            <div id="preview-content" class="p-6 prose prose-lg max-w-none min-h-96">
              <p class="text-gray-500">Preview will appear here...</p>
            </div>
          </div>

          <!-- Split Mode -->
          <div id="split-mode" class="editor-mode hidden">
            <div class="grid grid-cols-2 divide-x divide-gray-200">
              <div class="relative">
                <div class="border-b border-gray-200 px-4 py-2 bg-gray-50 text-sm font-medium text-gray-700">
                  Markdown
                </div>
                <textarea
                  id="split-content"
                  class="w-full h-96 p-4 border-none outline-none resize-none font-mono text-sm leading-relaxed"
                  data-auto-save="content"
                >{rawContent}</textarea>
              </div>
              <div class="relative">
                <div class="border-b border-gray-200 px-4 py-2 bg-gray-50 text-sm font-medium text-gray-700">
                  Preview
                </div>
                <div id="split-preview" class="p-4 prose prose-sm max-w-none h-96 overflow-y-auto">
                  <p class="text-gray-500">Preview will appear here...</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Sidebar -->
    <div class="xl:col-span-1 space-y-6">
      <!-- Publish Status -->
      <div class="admin-card">
        <h3 class="text-sm font-medium text-gray-900 mb-3 flex items-center">
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          Publish Status
        </h3>
        
        <div class="space-y-3">
          <div class="flex items-center justify-between">
            <span class="text-sm text-gray-600">Status:</span>
            <span id="current-status" class={`text-sm font-medium ${post.data.draft ? 'text-yellow-600' : 'text-green-600'}`}>
              {post.data.draft ? 'Draft' : 'Published'}
            </span>
          </div>
          
          <div class="flex items-center justify-between">
            <span class="text-sm text-gray-600">Visibility:</span>
            <select id="visibility" class="text-sm border-gray-300 rounded">
              <option value="public">Public</option>
              <option value="private">Private</option>
            </select>
          </div>

          <div>
            <label class="block text-sm text-gray-600 mb-1">Publish Date:</label>
            <input
              type="datetime-local"
              id="publish-date"
              value={post.data.pubDate.toISOString().slice(0, 16)}
              class="w-full text-sm border-gray-300 rounded"
              data-auto-save="pubDate"
            />
          </div>

          {post.data.updatedDate && (
            <div>
              <label class="block text-sm text-gray-600 mb-1">Last Updated:</label>
              <input
                type="datetime-local"
                id="updated-date"
                value={post.data.updatedDate.toISOString().slice(0, 16)}
                class="w-full text-sm border-gray-300 rounded"
                data-auto-save="updatedDate"
              />
            </div>
          )}
        </div>
      </div>

      <!-- SEO & Meta -->
      <div class="admin-card">
        <h3 class="text-sm font-medium text-gray-900 mb-3 flex items-center">
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
          SEO & Meta
        </h3>
        
        <div class="space-y-3">
          <div>
            <label class="block text-sm text-gray-600 mb-1">Meta Description:</label>
            <textarea
              id="description"
              rows="3"
              maxlength="160"
              class="w-full text-sm border-gray-300 rounded"
              placeholder="Brief description for search engines..."
              data-auto-save="description"
            >{post.data.description}</textarea>
            <div class="text-xs text-gray-400 mt-1">
              <span id="desc-count">{post.data.description?.length || 0}</span>/160 characters
            </div>
          </div>

          <div>
            <label class="block text-sm text-gray-600 mb-1">Featured Image URL:</label>
            <input
              type="url"
              id="hero-image"
              value={post.data.heroImage || ''}
              class="w-full text-sm border-gray-300 rounded"
              placeholder="https://example.com/image.jpg"
              data-auto-save="heroImage"
            />
          </div>
        </div>
      </div>

      <!-- Tags -->
      <div class="admin-card">
        <h3 class="text-sm font-medium text-gray-900 mb-3 flex items-center">
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
          </svg>
          Tags
        </h3>
        
        <div class="space-y-3">
          <!-- Tag Input -->
          <div class="flex">
            <input
              type="text"
              id="tag-input"
              class="flex-1 text-sm border-gray-300 rounded-l"
              placeholder="Add a tag..."
              onkeypress="if(event.key==='Enter'){event.preventDefault();addTag();}"
            />
            <button onclick="addTag()" class="bg-blue-600 text-white px-3 py-2 rounded-r text-sm hover:bg-blue-700">
              Add
            </button>
          </div>

          <!-- Popular Tags -->
          {existingTags.length > 0 && (
            <div>
              <div class="text-xs text-gray-500 mb-2">Popular tags:</div>
              <div class="flex flex-wrap gap-1">
                {existingTags.slice(0, 10).map((tag) => (
                  <button
                    onclick={`addTag('${tag}')`}
                    class="text-xs bg-gray-100 hover:bg-blue-100 text-gray-700 hover:text-blue-700 px-2 py-1 rounded transition"
                  >
                    {tag}
                  </button>
                ))}
              </div>
            </div>
          )}

          <!-- Selected Tags -->
          <div>
            <div class="text-xs text-gray-500 mb-2">Selected tags:</div>
            <div id="selected-tags" class="min-h-8 border border-gray-200 rounded p-2 bg-gray-50">
              <span class="text-xs text-gray-400">No tags selected</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Post Statistics -->
      <div class="admin-card">
        <h3 class="text-sm font-medium text-gray-900 mb-3 flex items-center">
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
          </svg>
          Statistics
        </h3>
        
        <div class="space-y-2 text-sm">
          <div class="flex justify-between">
            <span class="text-gray-600">Words:</span>
            <span id="stats-words">0</span>
          </div>
          <div class="flex justify-between">
            <span class="text-gray-600">Characters:</span>
            <span id="stats-chars">0</span>
          </div>
          <div class="flex justify-between">
            <span class="text-gray-600">Reading time:</span>
            <span id="reading-time">0 min</span>
          </div>
          <div class="flex justify-between">
            <span class="text-gray-600">Created:</span>
            <span>{formatDateForInput(post.data.pubDate)}</span>
          </div>
        </div>
      </div>
    </div>
  </div>
</AdminLayout>

<script define:vars={{ postTags: post.data.tags || [] }}>
  // Initialize editor state
  let selectedTags = [...postTags];
  let currentContent = '';
  let autoSaveEnabled = true;
  let saveTimeout;
  let undoHistory = [];
  let redoHistory = [];

  // Initialize when page loads
  document.addEventListener('DOMContentLoaded', function() {
    initializeEditor();
    updateTagsDisplay();
    updatePreview();
    updateStatistics();
    setupAutoSave();
    setupKeyboardShortcuts();
  });

  function initializeEditor() {
    const contentTextarea = document.getElementById('content');
    const splitTextarea = document.getElementById('split-content');
    
    // Sync content between main and split view
    contentTextarea.addEventListener('input', function() {
      splitTextarea.value = this.value;
      updatePreview();
      updateStatistics();
      triggerAutoSave();
    });
    
    splitTextarea.addEventListener('input', function() {
      contentTextarea.value = this.value;
      updatePreview();
      updateStatistics();
      triggerAutoSave();
    });

    // Title auto-save
    document.getElementById('title').addEventListener('input', function() {
      triggerAutoSave();
    });

    // Description character counter
    document.getElementById('description').addEventListener('input', function() {
      document.getElementById('desc-count').textContent = this.value.length;
      triggerAutoSave();
    });
  }

  // Editor mode switching
  function switchMode(mode) {
    // Update tabs
    document.querySelectorAll('.editor-tab').forEach(tab => tab.classList.remove('active'));
    document.getElementById(mode + '-tab').classList.add('active');
    
    // Update content areas
    document.querySelectorAll('.editor-mode').forEach(area => area.classList.add('hidden'));
    document.getElementById(mode + '-mode').classList.remove('hidden');
    
    if (mode === 'split') {
      // Sync content to split view
      const content = document.getElementById('content').value;
      document.getElementById('split-content').value = content;
      updateSplitPreview();
    }
  }

  // Setup event listeners for tabs
  document.getElementById('write-tab').addEventListener('click', () => switchMode('write'));
  document.getElementById('preview-tab').addEventListener('click', () => switchMode('preview'));
  document.getElementById('split-tab').addEventListener('click', () => switchMode('split'));

  // Toolbar actions
  document.querySelectorAll('.toolbar-btn').forEach(btn => {
    btn.addEventListener('click', function() {
      const action = this.dataset.action;
      handleToolbarAction(action);
    });
  });

  function handleToolbarAction(action) {
    const textarea = document.getElementById('content');
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const selectedText = textarea.value.substring(start, end);
    let replacement = '';

    switch(action) {
      case 'bold':
        replacement = `**${selectedText || 'bold text'}**`;
        break;
      case 'italic':
        replacement = `*${selectedText || 'italic text'}*`;
        break;
      case 'heading':
        replacement = `## ${selectedText || 'Heading'}`;
        break;
      case 'link':
        replacement = `[${selectedText || 'link text'}](url)`;
        break;
      case 'code':
        if (selectedText.includes('\n')) {
          replacement = `\`\`\`\n${selectedText}\n\`\`\``;
        } else {
          replacement = `\`${selectedText || 'code'}\``;
        }
        break;
      case 'quote':
        replacement = `> ${selectedText || 'quote'}`;
        break;
    }

    if (replacement) {
      insertText(textarea, replacement, start, end);
      updatePreview();
      updateStatistics();
    }
  }

  function insertText(textarea, text, start, end) {
    const before = textarea.value.substring(0, start);
    const after = textarea.value.substring(end);
    textarea.value = before + text + after;
    
    // Set cursor position
    const newPos = start + text.length;
    textarea.setSelectionRange(newPos, newPos);
    textarea.focus();
  }

  // Preview update functions
  function updatePreview() {
    const content = document.getElementById('content').value;
    const preview = document.getElementById('preview-content');
    
    if (content.trim() === '') {
      preview.innerHTML = '<p class="text-gray-500">Start writing to see preview...</p>';
      return;
    }

    preview.innerHTML = convertMarkdownToHTML(content);
  }

  function updateSplitPreview() {
    const content = document.getElementById('split-content').value;
    const preview = document.getElementById('split-preview');
    
    if (content.trim() === '') {
      preview.innerHTML = '<p class="text-gray-500">Start writing to see preview...</p>';
      return;
    }

    preview.innerHTML = convertMarkdownToHTML(content);
  }

  function convertMarkdownToHTML(markdown) {
    // Basic markdown to HTML conversion
    let html = markdown
      // Headers
      .replace(/^### (.*$)/gm, '<h3>$1</h3>')
      .replace(/^## (.*$)/gm, '<h2>$1</h2>')
      .replace(/^# (.*$)/gm, '<h1>$1</h1>')
      // Bold and italic
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      // Code blocks
      .replace(/```(\w+)?\n([\s\S]*?)```/g, '<pre><code>$2</code></pre>')
      // Inline code
      .replace(/`(.*?)`/g, '<code>$1</code>')
      // Links
      .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" class="text-blue-600 hover:underline">$1</a>')
      // Blockquotes
      .replace(/^> (.*$)/gm, '<blockquote class="border-l-4 border-gray-300 pl-4 italic">$1</blockquote>')
      // Line breaks
      .replace(/\n\n/g, '</p><p>')
      .replace(/\n/g, '<br>');
    
    return '<p>' + html + '</p>';
  }

  // Statistics
  function updateStatistics() {
    const content = document.getElementById('content').value;
    const words = content.trim() ? content.trim().split(/\s+/).length : 0;
    const chars = content.length;
    const readingTime = Math.ceil(words / 200); // Average reading speed

    document.getElementById('word-count').textContent = words + ' words';
    document.getElementById('char-count').textContent = chars + ' chars';
    document.getElementById('stats-words').textContent = words;
    document.getElementById('stats-chars').textContent = chars;
    document.getElementById('reading-time').textContent = readingTime + ' min';
  }

  // Tag management
  function addTag(tagName = null) {
    const input = document.getElementById('tag-input');
    const tag = tagName || input.value.trim().toLowerCase().replace(/\s+/g, '-');
    
    if (tag && !selectedTags.includes(tag)) {
      selectedTags.push(tag);
      updateTagsDisplay();
      if (!tagName) input.value = '';
      triggerAutoSave();
    }
  }

  function removeTag(tag) {
    selectedTags = selectedTags.filter(t => t !== tag);
    updateTagsDisplay();
    triggerAutoSave();
  }

  function updateTagsDisplay() {
    const container = document.getElementById('selected-tags');
    
    if (selectedTags.length === 0) {
      container.innerHTML = '<span class="text-xs text-gray-400">No tags selected</span>';
    } else {
      container.innerHTML = selectedTags.map(tag => 
        `<span class="inline-block bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded mr-1 mb-1">
          ${tag}
          <button onclick="removeTag('${tag}')" class="ml-1 text-blue-600 hover:text-blue-800">×</button>
        </span>`
      ).join('');
    }
  }

  // Auto-save functionality
  function setupAutoSave() {
    document.getElementById('auto-save').addEventListener('change', function() {
      autoSaveEnabled = this.checked;
      updateSaveStatus(autoSaveEnabled ? 'Auto-save enabled' : 'Auto-save disabled', 'info');
    });
  }

  function triggerAutoSave() {
    if (!autoSaveEnabled) return;
    
    clearTimeout(saveTimeout);
    updateSaveStatus('Saving...', 'saving');
    
    saveTimeout = setTimeout(() => {
      savePost('draft');
    }, 2000);
  }

  function updateSaveStatus(message, type = 'default') {
    const statusText = document.getElementById('status-text');
    const statusIcon = document.getElementById('status-icon');
    
    statusText.textContent = message;
    
    // Update icon and color based on type
    statusText.className = `text-${type === 'success' ? 'green' : type === 'error' ? 'red' : type === 'saving' ? 'blue' : 'gray'}-600`;
    
    if (type === 'success') {
      setTimeout(() => updateSaveStatus('Saved'), 2000);
    }
  }

  // Keyboard shortcuts
  function setupKeyboardShortcuts() {
    document.addEventListener('keydown', function(e) {
      if (e.ctrlKey || e.metaKey) {
        switch(e.key) {
          case 'b':
            e.preventDefault();
            handleToolbarAction('bold');
            break;
          case 'i':
            e.preventDefault();
            handleToolbarAction('italic');
            break;
          case 'k':
            e.preventDefault();
            handleToolbarAction('link');
            break;
          case 's':
            e.preventDefault();
            savePost('draft');
            break;
        }
      }
    });
  }

  // Save functions
  function savePost(action = 'draft') {
    const formData = {
      originalSlug: '{slug}',
      title: document.getElementById('title').value,
      description: document.getElementById('description').value,
      content: document.getElementById('content').value,
      pubDate: document.getElementById('publish-date').value,
      updatedDate: new Date().toISOString(),
      heroImage: document.getElementById('hero-image').value,
      tags: selectedTags,
      draft: action === 'draft'
    };

    updateSaveStatus('Saving...', 'saving');
    
    // TODO: Send to API endpoint
    console.log('Saving post:', formData);
    
    // Simulate save
    setTimeout(() => {
      updateSaveStatus('Saved successfully', 'success');
      
      if (action === 'publish') {
        document.getElementById('current-status').textContent = 'Published';
        document.getElementById('current-status').className = 'text-sm font-medium text-green-600';
      }
    }, 1000);
  }

  // Button event listeners
  document.getElementById('save-draft-btn').addEventListener('click', () => savePost('draft'));
  document.getElementById('publish-btn').addEventListener('click', () => savePost('publish'));
  document.getElementById('preview-btn').addEventListener('click', () => {
    const slug = '{slug}';
    window.open(`/blog/${slug}`, '_blank');
  });

  // Make functions global for onclick handlers
  window.addTag = addTag;
  window.removeTag = removeTag;
</script>

<style>
  .editor-tab {
    @apply flex items-center px-3 py-2 text-sm font-medium rounded-md text-gray-500 hover:text-gray-700 transition;
  }
  
  .editor-tab.active {
    @apply bg-white text-gray-900 shadow-sm border border-gray-200;
  }
  
  .toolbar-btn {
    @apply p-2 text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded transition;
  }
  
  .editor-mode {
    @apply transition-all duration-300;
  }
  
  .editor-mode.active {
    @apply block;
  }
  
  /* Custom scrollbar for preview */
  #split-preview::-webkit-scrollbar {
    width: 6px;
  }
  
  #split-preview::-webkit-scrollbar-track {
    background: #f1f5f9;
  }
  
  #split-preview::-webkit-scrollbar-thumb {
    background: #cbd5e1;
    border-radius: 3px;
  }
  
  #split-preview::-webkit-scrollbar-thumb:hover {
    background: #94a3b8;
  }
</style>